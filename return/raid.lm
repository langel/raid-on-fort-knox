;
; RAID ON FORT KNOX (C) 1982 Commodore ltd, Cracked by Nippur72 in 2006
;

;
; THIS IS THE ORIGINAL FILE, THAT IS, COMPILING IT
; PRODUCES THE ORIGINAL ROM FILE AS RELEASED BY
; COMMODORE IN 1982
;

        processor 6502
        include "macros.lm"

; ********** ROM **************

RUNSTOP_RESTORE        = $E518
HARDWARE_IRQ           = $EABF
RESTORE_KERNEL_VECTORS = $FD52
INIT_SYSTEM_COSTANTS   = $FD8D
IO_INIT                = $FDF9
CHROUT                 = $FFD2
GETIN                  = $FFE4

; ***** ZP locations **********

video_page = $288

; ********** Video memory relocations ************

;#ifdef CARTDRIGE_ROM
/*
screen_page   = $1E
screen_start  = (screen_page*256)
color_page    = $96
color_start   = (color_page*256)
color_offset  = (color_page-screen_page)
ram_start     = $1000
def_char_code = $FD
        org $A000
*/

;#elsedef 8K_RAM_EXPANSION
screen_page   = $10
screen_start  = (screen_page*256)
color_page    = $94
color_start   = (color_page*256)
color_offset  = (color_page-screen_page)
ram_start     = $1200
def_char_code = $CD

        org $1201
        byte $0b,$12,$d6,$07,158,"7","1","9","4",0,0,0 ; rem=143
        org $1C00
;#endif



; **** Program locations ******

man_color = $04               ; colore corrente omino
n_guards  = $FB

init_vals     = ram_start + $000         ; 4 bytes di variabili inizializzate in blocco
current_guard = ram_start + $000         ; guardia corrente
gold_taken    = ram_start + $001         ; indicatore se ha già preso il lingotto (per non riprenderlo)
player_step   = ram_start + $002         ; offset (0..8) del giocatore
move_code     = ram_start + $003         ; codice spostamento corrente del giocatore (0..3)

lives         = ram_start + $004         ; numero vite
livello       = ram_start + $005         ; livello (ai fini del colore)

gold_slot     = ram_start + $006         ; slot 0,1,2 dove è stato preso l'ultimo oro
gold_slot_0   = ram_start + $007         ; numero lingotti nello slot 0
gold_slot_1   = ram_start + $008         ; numero lingotti nello slot 1
gold_slot_2   = ram_start + $009         ; numero lingotti nello slot 2

sound_a       = ram_start + $00A         ; variabile per effetto sonoro
sound_b       = ram_start + $00B         ; variabile per effetto sonoro
bonus_lives   = ram_start + $00C         ; flag se bonus life gia' preso

guard_buf     = ram_start + $00D
guard_lo      = ram_start + $00D         ; puntatori hi byte guardia
guard_hi      = ram_start + $015         ; puntatore low byte guardia
guard_dirs    = ram_start + $01D         ; direzione (0..3) delle guardie
guard_steps   = ram_start + $025         ; step delle guardie (0..8)
bar_counter   = ram_start + $02D         ; contatore progress bar (0=disattivo)

irq_flags     = ram_start + $02F         ; 4 caratteri per irq flags
irq_flag0     = ram_start + $02F         ; flag irq per routine "GamePartOne"
irq_flag1     = ram_start + $030         ; flag irq per routine "GamePartTwo"
irq_flag2     = ram_start + $031         ; flag irq per routine "DoSounds"
irq_flag3     = ram_start + $032         ; flag irq per routine "ManageProgressBar"

level         = ram_start + $034         ; livello (numero)
guard_speed   = ram_start + $035         ; valore da settare per il contatore di velocita guardie (va in irq_flag1)
new_bar_speed = ram_start + $036         ; valore da settare per lo scorrimento della barra
level_char    = ram_start + $037         ; livello (sotto forma di carattere)
curr_score    = ram_start + $038         ; punteggio corrente (4 caratteri)
print_score   = ram_start + $03C         ; other score
last_score    = ram_start + $040         ; ultimo punteggio (4 caratteri)
high_score    = ram_start + $048         ; hiscore (4 caratteri)

; *****************************


;       org $977e
;StartAddress:
;        .byte   $00,$A0

ResetVector:
        .byte   $09,$A0
NMIVector:
        .byte   $80,$A0
A0CBM_Signature:
        .byte   $41,$30,$C3,$C2,$CD
CartStart:
        jsr     INIT_SYSTEM_COSTANTS

My_Start_Cartdrige:                                   ; @@@
        poke video_page, #screen_page                 ; imposta pagina video a 7680

        jsr     RESTORE_KERNEL_VECTORS
        jsr     IO_INIT
        jsr     RUNSTOP_RESTORE
My_Start_8K:                                          ; @@@
        cli

        lda     #$31
        sta     level_char
        lda     #$01
        sta     level
        sta     n_guards
        sta     livello

        lda     #(irq_handler%256)              ; installa_irq
        sta     $0314
        lda     #(irq_handler/256)
        sta     $0315

        ;
        ; esegue inizializzazioni valori iniziali
        ;
        lda #$00
        sta bar_counter
        sta gold_taken

        ; azzera current score
        ldx #$04
        lda #$30
        do
           sta curr_score,x
           dex
        loop while not negative

        ldx #$15
        do
           lda LA99B,x
           sta print_score,x
           dex
        loop while not negative

        poke 36869, #def_char_code              ; caratteri definibili a 5120

        ldx #$08

        lda #(CaratteriDefinibili%256) ; sposta caratteri da $AF5B a $1400
        sta $00
        lda #(CaratteriDefinibili/256)
        sta $01
        lda #$00
        sta $02
        lda #$14
        sta $03

        ; esegue spostamento caratteri 256 x 8 bytes (tutti e 256 caratteri)
        do
           ldy #$00
           do
              lda ($00),y
              sta ($02),y
              iny
           loop while not zero
           inc $01
           inc $03
           dex
        loop while not zero

        lda #$80                       ; blocca CBM + SHIFT
        sta $0291

        jmp IntroScreen

NeverGoesHere:
        pla                            ; quando va qui ???
        tay
        pla
        tax
        pla
        rti

;
; IRQ handler: decrementa i contatori delle routines principali
; portandoli fino a zero, temporizzando le stesse
;

irq_handler:
        ldx #$00
        do
           lda irq_flags,x
           if not zero then
              dec irq_flags,x
           end if
           inx
        loop while x<>#$04
        jmp HARDWARE_IRQ


StartNewLifeLoop:        
        jsr Wait
        jsr Wait
        jsr Wait
        jsr Wait
        jsr Wait
        dec lives
        lda lives
        bmi IntroScreen
        jmp DrawMaze

;
; ***** Main candidate *****
;

IntroScreen:
        lda #$02
        sta lives
        lda #$01
        sta bonus_lives

        lda #(IntroScreenData%256)   ; sposta memoria da $B75C a video
        sta $00                      ; e resetta color ram
        lda #(IntroScreenData/256)   ; 2 pagine (512 bytes)
        sta $01
        lda #$00
        sta $02
        sta $04
        lda #screen_page
        sta $03
        lda #color_page
        sta $05
        ldx #$02
        do
           ldy #$00
           do
              lda ($00),y
              sta ($02),y
              lda #$00
              sta ($04),y
              iny
           loop while not zero
           inc $01
           inc $03
           inc $05
           dex
        loop while not zero

        poke 36879, #$8F              ; colore schermo per intro screen

        jsr Wait
        jsr Wait
        jsr Wait
        jsr Wait

MainScreen:
        poke 36879, #$1B             ; colore schermo principale

DoLastScore:
        ldx #$04                     ; copia score (4 caratteri) in last score
        do
           lda curr_score,x          ; e imposta current score a "0"
           sta last_score,x
           lda #$30
           sta curr_score,x
           dex
        loop while not negative

DoHiscore:
        ldx #$00                  ; confronta last_score con hiscore
LA112:  lda last_score,x          ; e se necessario lo copia (4 caratteri)
        cmp high_score,x
        beq LA11E
        bpl LA123
        bmi MainScreenDraw
LA11E:  inx
        cpx #$04
        bne LA112
LA123:  lda last_score,x
        sta high_score,x
        inx
        cpx #$05
        bne LA123

MainScreenDraw:
        lda #(MainScreenData%256)  ; copia da $A959 a $1e00 (video)
        sta $00                    ; e imposta la color ram a colore rosso (2)
        lda #(MainScreenData/256)
        sta $01
        lda #$00
        sta $02
        sta $04
        lda #screen_page
        sta $03
        lda #color_page
        sta $05
        ldx #$02
        do
           ldy #$00
           do
              lda ($00),y
              sta ($02),y
              lda #$02
              sta ($04),y
              iny
           loop while not zero
           inc $01
           inc $03
           inc $05
           dex
        loop while not zero
        ldx #$15
LA15E:  lda print_score,x
        sta [screen_start+$43],x
        dex
        bne LA15E

DoLevel:
        lda level
        sta livello
        jsr Wait
        jsr Wait
        lda level_char              ; scrive a video carattere del livello
        sta [screen_start+$1E2]
        bne CheckLevel

IntroKeyLoop:
        jsr ReadIntroKey            ; tasto cursore giu (forse)
        cmp #$1D
        bne LA18F
        ldx $9000
        inx
        txa
        and #$0F
        sta $9000
        jmp IntroKeyLoop

LA18F:  cmp #$85                    ; tasto F1
        beq GameStart

        cmp #$11                    ; tasto cursore destra (forse)
        bne LA1A4
        ldx $9001
        inx
        txa
        and #$3F
        sta $9001
        jmp IntroKeyLoop

LA1A4:  cmp #$20                    ; tasto spazio (incr. livello)
        bne LA1DD
        inc level
        inc level_char
        lda level_char
        sta [screen_start+$1E2]

CheckLevel:
        lda level
        clc
        cmp #$05
        if carry then
           lda #$31
           sta [screen_start+$1E2]
           sta level_char
           lda #$01
           sta level
        end if
        lda level
        sta n_guards
        sta livello
        lda #$09
        sec
        sbc level
        sta new_bar_speed
        jmp IntroKeyLoop

LA1DD:  cmp #$88                             ; tasto boh?
        bne IntroKeyLoop

IntroKeyLoopEnd:
        lda $9000
        eor #$80
        sta $9000
        jmp IntroKeyLoop

GameStart:
        jsr SetGold

DrawMaze:
        lda livello               ; prepara per copia,  A = livello * 2 + $AB
        and #$01                  ; da $AB5A + (A and 1)*512 a $1e00 (video)
        asl                       ; copia 512 caratteri (video intero)
        clc
        adc #(Maze0Data/256)
        sta $01
        lda #(Maze0Data%256)
        sta $00
        lda #screen_page
        sta $03
        lda #color_page
        sta $05
        lda #$00
        sta $02
        sta $04

        ldx #$02
        do
           ldy #$00
           do
              lda ($00),y
              sta ($02),y
              cmp #$51                  ; se incontra il carattere #$51
              bne LA21C                 ; cambia il colore
              lda #$07
              bne LA222
LA21C:        lda livello
              clc
              adc #$02
LA222:        sta ($04),y
              iny
           loop while not zero
           inc $01
           inc $03
           inc $05
           dex
        loop while not zero

        jsr DrawGoldSlots         ; disegna qualcosa (non ancora identificato)

        lda #$29                  ; pone $1e29 nel puntatore $00 (omino in alto a dx)
        sta $00
        lda #screen_page
        sta $01

        lda #$06
        sta man_color             ; colore omino

        lda #$03
        sta guard_speed           ; imposta velocita guardie

        ldx #$03                  ; copia 4 bytes da area (init probabilmente)
        do
           lda ProgramData,x
           sta init_vals,x
           dex
        loop while not negative

        ldx #$1F                  ; initializes all guards
        do
           lda GuardInitTable,x
           sta guard_buf,x
           dex
        loop while not negative

        txs                           ; pone a zero lo SP ?

        jsr DrawLives

RestoreIRQCounters:
        ldx #$00                      ; azzera gli irq_flags iniziali  (###)
        do
           lda #$00
           sta irq_flags,x
           inx
        loop while x<>#$04
        jmp GameLoop

DrawLives:
        ldx lives                     ; disegna omini (vite) in alto
        do
          lda #$80
          sta screen_start,x
          lda #$00
          sta color_start,x
          dex
        loop while not negative
        rts

irq_flag0_init_val:    .byte   $01
irq_flag1_init_val:    .byte   $03
irq_flag2_init_val:    .byte   $01
irq_flag3_init_val:    .byte   $08

GameLoop:
        jsr GamePartOne
        jsr GamePartTwo
        jsr PrintScore
        jsr DoSounds
        jsr ManageProgressBar
        jmp GameLoop

;
; Legge i tasti nella schermata di intro, F1, Space e cursori
;

ReadIntroKey:
        ldx #$10
LA296:  jsr GETIN
        dex
        bne LA296
LA29C:  lda $911F
        and #$20
        bne LA2A6
        lda #$85
        rts
LA2A6:  lda #$00
        jsr GETIN
        beq LA29C
        rts

;
; **** esegue un ciclo di pausa
;

Wait:
        ldx #$00
        do
           ldy #$00
           do
              iny
           loop while not zero
           inx
        loop while not zero
        rts

;
; Probabile routine keyboard / joystick
;

GamePartOne:
        lda irq_flag0                ; controlla il flag se deve attivare la routine
        if not zero then
           rts
        end if

        lda irq_flag0_init_val       ; ripristina il valore del contatore
        sta irq_flag0

        lda player_step
        if not zero then
           jmp DrawMan
        end if

ReadJoystick:
        ldy #$00                 ; legge joystick
        ldx $911F
        txa
        and #$04                 ; direzione 1, y=0
        beq LA2F7
        txa
        and #$08                 ; direzione 2, y=3
        beq LA2F4
        txa
        and #$10                 ; direzione 3, y=1
        beq LA2F6

        lda #$7F
        sta $9122
        lda $9120
        and #$80                 ; direzione 4, y=2
        beq LA2F5

        lda #$FF
        sta $9122
        bne ReadKeyboard

MovementCodeJoystick:
LA2F4:  iny
LA2F5:  iny
LA2F6:  iny
LA2F7:  lda #$FF
        sta $9122                ; ripristina tastiera
        tya
        tax
        jmp MovePlayerNewDir


ReadKeyboard:
        lda $CB                       ; legge tasto premuto (203=same as 197)
        if a=#64 then DoMovePlayer    ; nessun tasto premuto, sposta con vecchia direzione

FindKey:
        ldx #$03
        do
           cmp KeyCodeTable,x
           if zero then goto MovePlayerNewDir
           dex
        loop while not negative
        jmp DoMovePlayer

;
; riceve in x il codice movimento/tasto (0,1,2,3)
; sposta il giocatore in base alla nuova direzione
; accettandola solo se è casella libera
;

MovePlayerNewDir:
        lda MoveTable,x             ; sposta il puntatore del giocatore
        tay                         ; y contiene il numero da sommare, x il codice direzione
        if negative then
           dec $01                  ; se negativo, si sposta di pagina
           lda ($00),y
           inc $01
        else
           lda ($00),y
        end if

        if a=#$20 then              ; se la casella è libera accetta il movimento
           stx move_code            ; memorizzando il codice direzione (x)
        end if

DoMovePlayer:                       ; sposta il giocatore su una direzione gia' assestata
        ldx move_code
        lda MoveTable,x             ; esegue la somma del codice nel puntatore ($00)
        if negative then
           dec $01
        end if
        clc
        adc $00
        sta $00
        if carry then
           inc $01
        end if

        ldy #$00                    ; controlla collisione del giocatore
        lda ($00),y
        if a=#$20 then goto NoCollision

PlayerCollision:
        ldx #$03                    ; find collision con simboli: 0=maze, 1=oro1, 2=oro2, 3=tana
        do
           cmp CollisionTable,x
           if equal then goto FoundGold
           dex
        loop while not negative

        jsr  DrawMan              ; killed: disega omino e
        poke bar_counter,#$00     ; ripristina contatore
        jmp  CapturedMan2         ;

FoundGold:
        txa                              ; x contiene il codice oro (oro o tana)
        asl
        tax                              ; fa uno sporchissimo jump condizionale
        lda FoundGoldJumpTable,x         ;
        pha                              ; on x goto $a3d5, $a3e9, $a3e9, $a42e
        lda [FoundGoldJumpTable+1],x     ; on x goto FoundMaze, FoundLingot, FoundLingot, FoundNest
        tax
        dex
        txa
        pha
        rts

NoCollision:                             ; non c'è nessuna collisione,
        lda #$08                         ; imposta omino in posizione allineata
        sta player_step

DrawMan:
        ldx move_code                    ; calcola primo carattere omino
        lda player_step
DrawMan1:
        asl
        clc
        adc Mul16Table,x
        tax                              ; x = move_code*8*2 + player_step*2;
        lda CharManMoveTable,x           ; a = CharManMoveTable(x)

        ldy #$00                         ; scrive su video primo carattere omino
        sta ($00),y

        lda $01                          ; scrive colore omino con puntatore ($02)
        clc                              ;
        adc #color_offset                ;
        sta $03                          ; e pone in 03 la pagina colore
        lda $00                          ;
        sta $02                          ;
        lda man_color                    ; $04 = colore omino
        sta ($02),y                      ;

        inx                              ; calcola posizione secondo carattere omino
        lda CharManMoveTable,x           ; in base alla direzione e la mette nel puntatore ($02)
        pha                              ; che contiene il puntatore alla memoria colore
        ldx move_code                    ; mette inoltre nello stack il carattere dell'omino calcolato
        lda ScreenMoveTable,x
        if negative then
           dec $03
        end if
        clc
        adc $02
        sta $02
        if carry then
           inc $03
        end if

        lda man_color                    ; scrive colore
        sta ($02),y

        lda $03                          ; ritorna nella pagina video
        sec
        sbc #color_offset
        sta $03

        pla                              ; ripiglia carattere omino dallo stack
        sta ($02),y                      ; e lo scrive

        lda player_step                  ; aggiorna lo step ed esegue il suono
        and #$03                         ;
        if zero then                     ;
           lda #$0F                      ;
           sta 36878                     ;
           lda #$80                      ;
           sta 36874                     ;  (###)
        else                             ;
           lda #$00                      ;
           sta 36874                     ;
        end if                           ;
        dec player_step                  ;

        rts

FoundMaze:                               ; proviene da un jump condizionale $A3D5
        ldx move_code
        lda ScreenMoveTable,x            ; se ha trovato un maze annulla lo
        if negative then                 ; spostamento, riposizionando il puntatore
           dec $01                       ; dove era prima
        end if
        clc
        adc $00
        sta $00
        if carry then
           inc $01
        end if
        rts

FoundLingot:                                ; proviene da un jump condizionale $A3E9
        lda gold_taken
        if not zero then                    ; se ha gia preso lingotto (###)
           jmp FoundMaze
        end if
        ldx #$00                            ; verifica sul puntatore omino ($00)
        lda $01
        cmp #(screen_page+1)
        beq LA401
        lda $00
        cmp #$DC
        bpl LA402
        bmi LA403
LA401:  inx
LA402:  inx                                 ; x=2 se in pagina $1F; x=1 se riga > #$DC, x=0 se riga < #$DC
LA403:  stx gold_slot                       ; probabile indicatore della riga del lingotto
        inx
        stx gold_taken                      ; setta indicatore lingotto preso ad un valore <> 0

        lda #$05                            ; cambia colore ad omino
        sta man_color

        lda #$02                            ; riduce velocita guardie (da 3 a 2)
        sta guard_speed

        poke bar_counter,#$9F               ; inizia a far decrementare la progress bar

        lda ($00),y
        if a=#$57 then                      ; se ha preso un mattone singolo non disegna niente al suo posto
           jsr DoStoleNoise
           jmp NoCollision
        end if
        lda #$57                            ; altrimenti è sicuramente un mattone doppio, disegna singolo
        sta ($00),y
        jsr DoStoleNoise
        jmp FoundMaze

FoundNest:                             ; proviene da un jump condizionale $A42E
        lda gold_taken
        if zero then goto FoundMaze    ; se non ha lingotto, non fa niente

        poke man_color, #$06           ; ripristina colore omino
        poke guard_speed,#$03          ; ripristina velocita guardie
        poke gold_taken, #$00          ; ripristina indicatore lingotto preso

        ldy bar_counter
        if not zero then               ; se c'è la barra la somma al punteggio
           sei                         ; incrementandolo ad uno ad uno
           do
              jsr IncrementScore
              dec bar_counter
              jsr DrawProgressBar
              ldy bar_counter
           loop while not zero
           poke bar_counter, #$9F       ; disegna progressbar piena
           jsr  DrawProgressBar
           lda  #$5C                    ; scrive carattere in progressbar???
           sta  [screen_start+$1E2]     ;
           poke bar_counter,#$00        ; azzera progressbar
           cli
        end if

CountGoldLeft:
        ldx gold_slot               ; decrementa l'oro nello slot
        dec gold_slot_0,x

        lda gold_slot_0             ; conta quanto oro è rimasto (###)
        clc
        adc gold_slot_1
        clc
        adc gold_slot_2
        if not zero then goto DepositGold

NewLevel:
        jsr SetGold
        ldy n_guards

        ; assegna bonus maze
        do
           ldx #$02
           jsr IncrementScore2
           dey
        loop while not zero

        ; scrive scritta "bonus maze"
        ldx #$19
        do
           lda BonusMazeStringTable,x
           jsr CHROUT
           dex
        loop while not negative

        ; incrementa numero di guardie (fino a 6)
        lda n_guards
        if a<>#$07 then
           inc n_guards
        end if

        ; incrementa livello
        inc livello
        lda livello
        and #$03
        sta livello

        jsr SetGold        ; imposta oro per i livello

        lda #$00           ; ammutolisce
        sta 36878
        sta 36876

        jsr Wait           ; attende e riparte
        jsr Wait
        jsr Wait
        jsr Wait
        jmp DrawMaze

DepositGold:
        lda #$0F           ; ammutolisce
        sta 36878
        sta 36874
        sta 36875
        sta 36876

        ; fa effetto sonoro di deposito gold
        ldx #$00
        do
           stx 36877
           jsr SmallWait
           dex
        loop while negative

        poke 36877, #$00   ; ammutolisce
        
        jmp FoundMaze

;
; Imposta le vite a 3
;

SetGold:
        ldx #$02
        lda n_guards
        do                          ; imposta numero lingotti negli slot in base al livello
           sta gold_slot_0,x
           dex
        loop until negative
        rts

;
; Esegue un piccolo ciclo di ritardo
;

SmallWait:
        ldy #$00
        do
          iny
        loop while not zero
        rts

;
; Fa il rumore di quando si prende un gold
;

DoStoleNoise:
        lda #$0F
        sta 36878
        sta 36874
        sta 36875
        sta 36876
        ldx #$80
        do
           stx 36877
           jsr SmallWait
           inx
        loop while negative
        stx 36877
        rts

;
; Incrementa il punteggio di 1 ed assegna una vita se
; scatta la prima cifra ed il bonus non e' gia' stato dato
;

IncrementScore:
        ldx #$04
IncrementScore2:
        inc curr_score,x
        lda curr_score,x
        cmp #$3A            ; > "9" ?
        bne LA53B
        lda #$30            ; "0"
        sta curr_score,x
        dex
        bmi LA53B
        cpx #$01            ; e' arrivato ad incrementare la prima cifra?
        bne IncrementScore2 ; no continua ad incrementare
        lda bonus_lives     ; gia preso il bonus ?
        bne IncrementScore2 ; si, continua
        inc lives           ; no, incrementa le vite
        stx $02
        jsr DrawLives
        ldx $02
        sta bonus_lives     ; bonus gia dato
        beq IncrementScore2
LA53B:  rts


;
; Stampa il punteggio a video (4 caratteri)
;

PrintScore:
        ldx #$04
        do
           lda curr_score,x
           sta [screen_start+$0C],x
           dex
        loop while not negative
        rts

;
; Movimento guardie
;

GamePartTwo:
        lda irq_flag1            ; controllo abilitazione movimento (velocita')
        if not zero then
           rts
        end if

        lda guard_speed          ; reimposta contatore velocita routine
        sta irq_flag1

        ;
        ; ciclo principale delle guardie, conta da 1 a n_guards
        ;

        ldx #$00
GuardLoop:
        stx current_guard            ; imposta guardia corrente

        lda guard_lo,x               ; carica puntatore video guardia ($02)
        sta $02
        lda guard_hi,x
        sta $03
        lda guard_steps,x
        bne MoveGuard                ; possibile print guard

        ; esegue spostamento guardia
        lda guard_dirs,x
        tax
        lda MoveTable,x
        if negative then
           dec $03
        end if
        clc
        adc $02
        sta $02
        if carry then
           inc $03
        end if

        ; controlla collisione
        ldy #$00
        lda ($02),y
        if a=#$20 then goto MoveGuard ; collide con spazio, prosegue
        if a=#$5C then                ; collide con maze, cambia direzione
          jsr MoveOneGuard
          jmp GuardTurnMaze
        end if

        ; trova se collide con omino
        ldx #$3F
        do
           cmp CharManMoveTable2,x
           if zero then goto CapturedMan1
           dex
           cmp CharManMoveTable2,x
           if zero then goto CapturedMan2
           dex
        loop while not negative

        ; ha trovato qualcosaltro, cambia direzione
        jmp GuardChangeDir

;
; Man captured by collision on the first character of the man
;

CapturedMan1:
        lda $03              ; ridisegna omino con step 1, ripristinando i puntatori
        pha
        lda $02
        pha
        lda #$01
        ldx move_code
        jsr DrawMan1
        pla
        sta $02
        pla
        sta $03

        lda #$01             ; imposta step a 1
        ldx current_guard
        sta guard_steps,x
        jsr DrawGuard

        lda $03              ; va in pagina colore
        clc
        adc #color_offset
        sta $03
        lda #$00             ; ripristina colore nero
        sta ($02),y
        lda $03
        sec
        sbc #color_offset    ; ritorna in pagina video
        sta $03
        jsr DrawGuard2
        jmp Killed

;
; Man captured by collision on the second character of the man
;

CapturedMan2:
        lda #$01         ; disegna uomo con step 1
        ldx move_code    ; va alla sequenza killed
        jsr DrawMan1
        jmp Killed

MoveGuard:
        ldx current_guard
        lda guard_steps,x
        if zero then
           lda #$08
           sta guard_steps,x
        end if

        lda $02                     ; save guard pointer
        sta guard_lo,x
        lda $03
        sta guard_hi,x

        jsr DrawGuard

        lda $03                     ; si sposta su pagina colore
        clc
        adc #color_offset
        sta $03
        lda #$00
        sta ($02),y                 ; scrive colore nero
        inx
        lda GuardCharMoveTable,x
        pha

        ldx current_guard
        lda guard_dirs,x
        tax
        lda ScreenMoveTable,x
        if negative then
           dec $03
        end if
        clc
        adc $02
        sta $02
        if carry then
           inc $03
        end if
        lda #$00                   ; scrive nero
        sta ($02),y
        lda $03
        sec
        sbc #color_offset          ; ritorna a pagina video
        sta $03
        pla
        sta ($02),y
        ldx current_guard
        dec guard_steps,x

CloseGuardLoop:
        ldx current_guard
        inx
        cpx n_guards
        if not zero then
           jmp GuardLoop
        end if
        rts                        ; chiude ciclo guardie

DrawGuard:
        ldx current_guard
        lda guard_steps,x
        asl
        sta $05
        lda guard_dirs,x
        tax
        lda Mul16Table,x
        clc
        adc $05
        tax
        lda GuardCharMoveTable,x
        ldy #$00
        sta ($02),y
        rts

DrawGuard2:
        ldx current_guard
        lda guard_dirs,x
        tax
        ldy ScreenMoveTable,x
        bpl LA676
        dec $03
        lda #$20
        sta ($02),y
        inc $03
        bne LA67A
LA676:  lda #$20
        sta ($02),y
LA67A:  rts

MoveOneGuard:
        ldx current_guard
        lda guard_dirs,x
        tax
        lda ScreenMoveTable,x
        if negative then
           dec $03
        end if
        clc
        adc $02
        sta $02
        if carry then
           inc $03
        end if
        rts

;
; chiamata quando ostacola con altra guardia
;
GuardChangeDir:
        jsr MoveOneGuard
        ldx current_guard
        lda guard_dirs,x
        tax
        lda GuardChangeDirTable,x
        ldx current_guard
        sta guard_dirs,x
        jmp CloseGuardLoop

;
; Cambia direzione quando incontra un maze, sceglie direzione casuale
;
GuardTurnMaze:
        ldx current_guard
        lda guard_dirs,x
        asl
        sta $06
        lda $A2                    ; jiffy clock for random
        and #$01
        sta $05                    ; $05 = guard_dirs[current_guard]*2+rnd(1)
        clc
        adc $06
        tax
        lda GuardRandomTurnTable,x
        tax
        lda MoveTable,x
        tay
        if negative then
           dec $03
           lda ($02),y
           inc $03
        else
           lda ($02),y
        end if
        cmp #$5C
        bne LA6EB
        inc $05
        lda $05
        and #$01
        clc
        adc $06
        tax
        lda GuardRandomTurnTable,x
LA6E2:  ldx current_guard
        sta guard_dirs,x
        jmp CloseGuardLoop
LA6EB:  txa
        jmp LA6E2


;
; Esegue effetti sonori (di preciso quali non so)
;

DoSounds:
        lda irq_flag2                      ; controlla abilitazione routine
        if not zero then
           rts
        end if

        lda irq_flag2_init_val
        sta irq_flag2
        lda #$04
        sta $900E
        lda gold_slot_0
        clc
        adc gold_slot_1
        adc gold_slot_2
        adc #$05
        sta sound_a
        inc sound_b
        lda sound_b
        cmp sound_a
        if not negative then
           lda #$00
           sta sound_b
        end if
        lda n_guards
        asl
        clc
        adc n_guards
        sec
        sbc sound_a
        clc
        asl
        clc
        adc #$D0
        sec
        sbc sound_b
        sta $900B
        sta $900C
        rts

;
; killed
;

Killed:
        lda     #$80                  ; fa rumore killed e ammutolisce le altre voci
        sta     $900D
        lda     #$00
        sta     bar_counter
        sta     36874
        sta     36875
        sta     36876

        ldx     #$0F                  ; mostra la sequenza di caratteri
        do
           ldy     #$00
           lda     KilledCharTable,x
           sta     ($00),y
           stx     36878              ; abbassa il volume
           stx     $02
           jsr     Wait               ; ciclo ritardo
           ldx     $02
           dex
        loop until negative

        poke 36877, #00               ; spegne rumore

        lda lives
        if not zero then
           jmp StartNewLifeLoop
        end if

        ldx #$19                      ; stampa GAME OVER (25 caratteri compresi ctrl codes)
        do
          lda GameOverTable,x
          jsr CHROUT
          dex
        loop until negative
        jmp StartNewLifeLoop


; **********************************************************

; valori iniziali

ProgramData:
        .byte $00        ; current_guard
        .byte $00        ; gold_taken
        .byte $01        ; player_step
        .byte $00        ; move_code
        .byte $02        ; lives
        .byte $00        ; livello

;
; Codici per spostamento nelle 4 direzioni
;

MoveTable:
        .byte   $EA,$FF,$01,$16

CollisionTable:
        .byte   $5C,$57,$51,$24

Mul16Table:
        .byte   $00,$10,$20,$30

KeyCodeTable:
        .byte   $0D,$15,$16,$25

ScreenMoveTable:
        .byte   $16,$01,$FF,$EA

GuardCharMoveTable:
        .byte   $00,$00,$C0,$20,$C2,$C3,$C4,$C5
        .byte   $C6,$C7,$C8,$C9,$CA,$CB,$CC,$CD
        .byte   $CE,$CF,$D0,$20,$D2,$D3,$D4,$D5
        .byte   $D6,$D7,$D8,$D9,$DA,$DB,$DC,$DD
        .byte   $DE,$DF,$E0,$20,$E2,$E3,$E4,$E5
        .byte   $E6,$E7,$E8,$E9,$EA,$EB,$EC,$ED
        .byte   $EE,$EF,$F0,$20,$F2,$F3,$F4,$F5
        .byte   $F6,$F7,$F8,$F9,$FA,$FB,$FC,$FD
        .byte   $FE,$FF

;
; tabella di jump quando trova oro o tana
;

FoundGoldJumpTable:
        .byte   FoundMaze/256,    FoundMaze%256
        .byte   FoundLingot/256,  FoundLingot%256
        .byte   FoundLingot/256,  FoundLingot%256
        .byte   FoundNest/256,    FoundNest%256


GuardRandomTurnTable:
       .byte   $01,$02,$00,$03,$00,$03,$01,$02

GuardChangeDirTable:
       .byte   $03,$02,$01,$00

CharManMoveTable:
        .byte   $00,$00
CharManMoveTable2:
        .byte   $80,$20,$82,$20,$84,$85,$86,$87,$88,$89,$8A,$8B,$8C,$8D,$8E,$8F
        .byte   $90,$20,$92,$20,$94,$95,$96,$97,$98,$99,$9A,$9B,$9C,$9D,$9E,$9F
        .byte   $A0,$20,$A2,$20,$A4,$A5,$A6,$A7,$A8,$A9,$AA,$AB,$AC,$AD,$AE,$AF
        .byte   $B0,$20,$BF,$20,$BD,$BC,$BB,$BA,$B9,$B8,$B7,$B6,$B5,$B4,$B3,$B2

;
; sequenza (al contrario) dell'omino che muore
;
KilledCharTable:
        .byte   $5B,$5A,$59,$58,$B0,$A0,$90,$80
        .byte   $B0,$A0,$90,$80,$B0,$A0,$90,$80

;
; Questi 32 caratteri vengono copiati nell'area delle guardie
;

GuardInitTable:
        .byte   $52,$52,$52,$52,$72,$72,$72,$72
        .byte   (screen_page+1),(screen_page+1),(screen_page+1),(screen_page+1),(screen_page+1),(screen_page+1),(screen_page+1),(screen_page+1)
        .byte   $00,$03,$01,$02,$00,$03,$02,$01
        .byte   $00,$00,$00,$00,$00,$00,$00,$00

;
; Scritta BONUS MAZE (al contrario)
;

BonusMazeStringTable:
        .byte   $45,$5A,$41,$4D,$20,$53,$55,$4E
        .byte   $4F,$42,$1D,$1D,$1D,$1D,$1D,$11
        .byte   $11,$11,$11,$11,$11,$11,$11,$11
        .byte   $11,$93

;
; Scritta game over (con codici di controllo)
;

GameOverTable:
        .byte   $52,$45,$56,$4F,$20,$45,$4D,$41
        .byte   $47,$1D,$1D,$1D,$1D,$1D,$1D,$11
        .byte   $11,$11,$11,$11,$11,$11,$11,$11
        .byte   $11,$13,$00,$FA,$80,$FA,$C0,$FA
        .byte   $E0,$FA,$F0,$FA,$FA,$FA


DrawGoldSlots:
        lda #$00
        sta gold_slot

        lda $02                  ; salva il puntatore a ($02)
        pha
        lda $03
        pha

        lda #$CA                 ; carica la posizione video del gold slot
        sta $02
        lda #screen_page
        sta $03

        ldy #$02

LA8B4:  ldx gold_slot            ; cicla sui 3 slot
        lda gold_slot_0,x
        tax
        jsr LA8D6
        jsr LA8D6
        jsr LA8D6
        tya
        clc
        adc #$2F
        tay
        inc gold_slot
        lda gold_slot
        cmp #$03
        bpl LA8F0
        jmp LA8B4

LA8D6:  txa
        beq LA8EB
        dex
        dex
        bmi LA8E3
        lda #$51
        sta ($02),y
        dey
        rts
LA8E3:  lda  #$57
LA8E5:  sta  ($02),y
        ldx  #$00
        dey
        rts

LA8EB:  lda     #$20
        bne     LA8E5
        rts

LA8F0:  pla
        sta     $03
        pla
        sta     $02
        rts

;
; Disegna la barra di scorrimento del tempo
;

ManageProgressBar:
        lda irq_flag3
        if not zero then
ManageProgressBarExit:
           rts
        end if

        lda new_bar_speed          ; set the bar speed
        sta irq_flag3              ;

        lda bar_counter                          ; if reached zero, do nothing
        if zero then goto ManageProgressBarExit

        dec bar_counter                          ; decrements bar

        if not zero then goto DrawProgressBar    ; if not reached zero, do normal print

        ;
        ; has reached zero, restore the full bar
        ;

        ldy #$14
        do
           lda #$5C                   ; write maze character
           sta [screen_start+$1CE],y  ;
           lda livello                ; calc maze color
           clc                        ;
           adc #$02                   ;
           and #$07                   ;
           sta [color_start+$1CE],y   ; writes color
           dey
        loop while not zero

        lda #$01                   ; massima velocità alle guardie
        sta guard_speed
        rts

DrawProgressBar:
        lda bar_counter
        lsr
        lsr
        lsr
        tax
        tay

        ; writes the main part of the bar
        if not zero then
           do
             lda #$5C
             sta [screen_start+$1CE],x
             lda #$00
             sta [color_start+$1CE],x
             dex
           loop while not zero
        end if

        ; writes the leading character
        lda bar_counter
        and #$07                        ; ### adc #$40 and save "ProgressBarCharTable"
        tax
        lda ProgressBarCharTable,x
        sta [screen_start+$1CF],y
        lda #$00
        sta [color_start+$1CF],y
        rts

ProgressBarCharTable:
        .byte   $40,$41,$42,$43,$44,$45,$46,$47


MainScreenData:    ; @@@
               ;  1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22
        .byte   $20,$20,$20,$12,$01,$09,$04,$20,$0F,$0E,$20,$06,$0F,$12,$14,$20,$0B,$0E,$0F,$18,$20,$20
        .byte   $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
        .byte   $20,$0C,$01,$13,$14,$20,$13,$03,$0F,$12,$05,$20,$08,$09,$20,$13,$03,$0F,$12,$05,$20,$20
LA99B:  .byte   $20,$20,$20,$24,$30,$30,$30,$30,$30,$20,$20,$24,$30,$30,$30,$30,$30,$20,$20,$20,$20,$20
        .byte   $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
        .byte   $20,$20,$20,$20,$20,$20,$20,$0D,$0F,$16,$09,$0E,$07,$20,$20,$20,$20,$20,$20,$20,$20,$20
        .byte   $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
        .byte   $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$10,$2D,$15,$10,$20,$20,$20,$20,$20,$20,$20,$20
        .byte   $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$5D,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
        .byte   $20,$20,$20,$0C,$05,$06,$14,$20,$0C,$2D,$56,$2D,$3B,$20,$12,$09,$07,$08,$14,$20,$20,$20
        .byte   $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$5D,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
        .byte   $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$2E,$2D,$04,$0F,$17,$0E,$20,$20,$20,$20,$20,$20
        .byte   $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
        .byte   $20,$20,$20,$20,$20,$0F,$12,$20,$15,$13,$05,$20,$0A,$0F,$19,$13,$14,$09,$03,$0B,$20,$20
        .byte   $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
        .byte   $02,$0F,$0E,$15,$13,$20,$06,$0F,$12,$20,$05,$0D,$10,$14,$19,$20,$16,$01,$15,$0C,$14,$20
        .byte   $20,$20,$20,$28,$31,$30,$30,$20,$2A,$20,$23,$20,$0F,$06,$20,$07,$15,$01,$12,$04,$13,$29
        .byte   $20,$20,$20,$20,$2E,$2E,$2E,$2E,$2E,$2E,$2E,$2E,$2E,$2E,$2E,$2E,$2E,$2E,$20,$20,$20,$20
        .byte   $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
        .byte   $20,$10,$12,$05,$13,$13,$20,$27,$06,$31,$27,$20,$14,$0F,$20,$13,$14,$01,$12,$14,$20,$20
        .byte   $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
        .byte   $08,$09,$14,$20,$13,$10,$01,$03,$05,$20,$06,$0F,$12,$20,$0C,$05,$16,$05,$0C,$1B,$31,$1D
        .byte   $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20

        .byte   $20,$20,$20,$20,$20,$20,$5C

Maze0Data:
               ;  1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22
        .byte   $5C,$5C,$5C,$5C,$20,$02,$01,$12,$13,$20,$20,$20,$30,$30,$30,$30,$30,$20,$5C,$24,$5C,$5C
        .byte   $5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$20,$5C,$5C
        .byte   $5C,$5C,$5C,$5C,$20,$20,$20,$20,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$20,$5C,$5C
        .byte   $5C,$20,$20,$20,$20,$5C,$5C,$20,$20,$5C,$5C,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$5C
        .byte   $5C,$20,$5C,$20,$5C,$5C,$5C,$5C,$20,$5C,$5C,$20,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$20,$5C
        .byte   $5C,$20,$5C,$20,$20,$20,$20,$20,$20,$5C,$5C,$20,$5C,$5C,$20,$20,$20,$20,$20,$20,$20,$5C
        .byte   $5C,$20,$5C,$5C,$5C,$20,$5C,$5C,$20,$5C,$5C,$20,$5C,$5C,$20,$5C,$5C,$5C,$5C,$5C,$20,$5C
        .byte   $5C,$20,$20,$20,$20,$20,$5C,$5C,$20,$5C,$5C,$20,$20,$20,$20,$5C,$20,$20,$20,$20,$20,$5C
        .byte   $5C,$20,$5C,$5C,$5C,$5C,$5C,$5C,$20,$5C,$5C,$5C,$5C,$20,$5C,$5C,$5C,$5C,$5C,$5C,$20,$5C
        .byte   $5C,$20,$20,$20,$51,$51,$51,$5C,$20,$20,$5C,$5C,$5C,$20,$20,$20,$20,$20,$20,$20,$20,$5C
        .byte   $5C,$20,$20,$5C,$5C,$5C,$5C,$5C,$5C,$20,$5C,$5C,$5C,$20,$5C,$5C,$5C,$20,$5C,$5C,$20,$5C
        .byte   $5C,$20,$20,$20,$51,$51,$51,$5C,$5C,$20,$20,$20,$20,$20,$20,$5C,$5C,$20,$20,$20,$20,$5C
        .byte   $5C,$20,$20,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$20,$5C,$5C,$5C,$5C,$20,$5C,$5C
        .byte   $5C,$20,$20,$20,$51,$51,$51,$5C,$20,$20,$20,$5C,$5C,$20,$20,$20,$20,$20,$5C,$20,$20,$5C
        .byte   $5C,$20,$5C,$5C,$5C,$5C,$5C,$5C,$20,$5C,$20,$5C,$5C,$20,$5C,$5C,$5C,$20,$5C,$5C,$20,$5C
        .byte   $5C,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$5C,$5C,$5C,$20,$20,$20,$20,$5C
        .byte   $5C,$20,$5C,$5C,$5C,$5C,$5C,$5C,$20,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$20,$5C,$20,$5C
        .byte   $5C,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$5C,$5C,$5C,$20,$20,$20,$20,$20,$20,$20,$5C
        .byte   $5C,$5C,$5C,$5C,$5C,$5C,$20,$5C,$5C,$5C,$20,$5C,$5C,$5C,$20,$5C,$5C,$5C,$5C,$5C,$20,$5C
        .byte   $5C,$20,$20,$20,$20,$20,$20,$5C,$5C,$5C,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$5C
        .byte   $5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C
        .byte   $5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C
        .byte   $5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C

        .byte   $20,$20,$20,$20,$20,$20

Maze1Data:
              ;  1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22
        .byte   $5C,$5C,$5C,$5C,$20,$02,$01,$12,$13,$20,$20,$20,$30,$30,$30,$30,$30,$20,$5C,$24,$5C,$5C
        .byte   $5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$20,$5C,$5C
        .byte   $5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$20,$5C,$5C
        .byte   $5C,$20,$20,$20,$20,$20,$5C,$5C,$5C,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$5C
        .byte   $5C,$20,$5C,$20,$5C,$20,$5C,$5C,$5C,$20,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$20,$5C,$20,$5C
        .byte   $5C,$20,$5C,$20,$5C,$20,$20,$20,$5C,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$5C,$20,$5C
        .byte   $5C,$20,$5C,$20,$5C,$5C,$5C,$20,$5C,$5C,$20,$5C,$5C,$5C,$20,$5C,$5C,$5C,$20,$5C,$20,$5C
        .byte   $5C,$20,$5C,$20,$20,$20,$20,$20,$20,$5C,$20,$5C,$5C,$5C,$20,$5C,$5C,$20,$20,$5C,$20,$5C
        .byte   $5C,$20,$5C,$5C,$5C,$5C,$5C,$5C,$20,$5C,$20,$20,$20,$5C,$20,$5C,$20,$20,$5C,$5C,$20,$5C
        .byte   $5C,$20,$20,$20,$51,$51,$51,$5C,$20,$5C,$5C,$5C,$20,$5C,$20,$5C,$20,$5C,$5C,$20,$20,$5C
        .byte   $5C,$20,$20,$5C,$5C,$5C,$5C,$5C,$20,$5C,$5C,$5C,$20,$5C,$20,$5C,$20,$5C,$5C,$20,$5C,$5C
        .byte   $5C,$20,$20,$20,$51,$51,$51,$5C,$20,$5C,$5C,$5C,$20,$5C,$20,$5C,$20,$5C,$5C,$20,$20,$5C
        .byte   $5C,$20,$20,$5C,$5C,$5C,$5C,$5C,$20,$20,$20,$20,$20,$20,$20,$5C,$20,$20,$5C,$5C,$20,$5C
        .byte   $5C,$20,$20,$20,$51,$51,$51,$5C,$20,$5C,$20,$5C,$5C,$20,$5C,$5C,$5C,$20,$20,$20,$20,$5C
        .byte   $5C,$20,$5C,$5C,$5C,$5C,$5C,$5C,$20,$5C,$20,$5C,$5C,$20,$5C,$5C,$5C,$20,$5C,$5C,$20,$5C
        .byte   $5C,$20,$20,$20,$20,$20,$5C,$5C,$20,$5C,$20,$5C,$5C,$20,$5C,$5C,$5C,$20,$5C,$5C,$20,$5C
        .byte   $5C,$5C,$20,$5C,$5C,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$5C,$5C,$20,$5C
        .byte   $5C,$5C,$20,$5C,$5C,$20,$5C,$5C,$20,$5C,$5C,$20,$5C,$20,$5C,$5C,$5C,$5C,$5C,$5C,$20,$5C
        .byte   $5C,$5C,$20,$5C,$5C,$20,$5C,$5C,$20,$5C,$5C,$20,$5C,$20,$20,$20,$20,$20,$5C,$5C,$20,$5C
        .byte   $5C,$5C,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$5C,$5C,$5C,$20,$20,$20,$20,$5C
        .byte   $5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C
        .byte   $5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C
        .byte   $5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C

        .byte   $5C,$5C,$5C,$5C,$5C,$5C,$1C

CaratteriDefinibili:

; char $0
	byte %00011100		; ...XXX..
	byte %00100010		; ..X...X.
	byte %01001010		; .X..X.X.
	byte %01010110		; .X.X.XX.
	byte %01001100		; .X..XX..
	byte %00100000		; ..X.....
	byte %00011110		; ...XXXX.
	byte %00000000		; ........
; char $1
	byte %00011000		; ...XX...
	byte %00100100		; ..X..X..
	byte %01000010		; .X....X.
	byte %01111110		; .XXXXXX.
	byte %01000010		; .X....X.
	byte %01000010		; .X....X.
	byte %01000010		; .X....X.
	byte %00000000		; ........
; char $2
	byte %01111100		; .XXXXX..
	byte %00100010		; ..X...X.
	byte %00100010		; ..X...X.
	byte %00111100		; ..XXXX..
	byte %00100010		; ..X...X.
	byte %00100010		; ..X...X.
	byte %01111100		; .XXXXX..
	byte %00000000		; ........
; char $3
	byte %00011100		; ...XXX..
	byte %00100010		; ..X...X.
	byte %01000000		; .X......
	byte %01000000		; .X......
	byte %01000000		; .X......
	byte %00100010		; ..X...X.
	byte %00011100		; ...XXX..
	byte %00000000		; ........
; char $4
	byte %01111000		; .XXXX...
	byte %00100100		; ..X..X..
	byte %00100010		; ..X...X.
	byte %00100010		; ..X...X.
	byte %00100010		; ..X...X.
	byte %00100100		; ..X..X..
	byte %01111000		; .XXXX...
	byte %00000000		; ........
; char $5
	byte %01111110		; .XXXXXX.
	byte %01000000		; .X......
	byte %01000000		; .X......
	byte %01111000		; .XXXX...
	byte %01000000		; .X......
	byte %01000000		; .X......
	byte %01111110		; .XXXXXX.
	byte %00000000		; ........
; char $6
	byte %01111110		; .XXXXXX.
	byte %01000000		; .X......
	byte %01000000		; .X......
	byte %01111000		; .XXXX...
	byte %01000000		; .X......
	byte %01000000		; .X......
	byte %01000000		; .X......
	byte %00000000		; ........
; char $7
	byte %00011100		; ...XXX..
	byte %00100010		; ..X...X.
	byte %01000000		; .X......
	byte %01001110		; .X..XXX.
	byte %01000010		; .X....X.
	byte %00100010		; ..X...X.
	byte %00011100		; ...XXX..
	byte %00000000		; ........
; char $8
	byte %01000010		; .X....X.
	byte %01000010		; .X....X.
	byte %01000010		; .X....X.
	byte %01111110		; .XXXXXX.
	byte %01000010		; .X....X.
	byte %01000010		; .X....X.
	byte %01000010		; .X....X.
	byte %00000000		; ........
; char $9
	byte %00011100		; ...XXX..
	byte %00001000		; ....X...
	byte %00001000		; ....X...
	byte %00001000		; ....X...
	byte %00001000		; ....X...
	byte %00001000		; ....X...
	byte %00011100		; ...XXX..
	byte %00000000		; ........
; char $a
	byte %00001110		; ....XXX.
	byte %00000100		; .....X..
	byte %00000100		; .....X..
	byte %00000100		; .....X..
	byte %00000100		; .....X..
	byte %01000100		; .X...X..
	byte %00111000		; ..XXX...
	byte %00000000		; ........
; char $b
	byte %01000010		; .X....X.
	byte %01000100		; .X...X..
	byte %01001000		; .X..X...
	byte %01110000		; .XXX....
	byte %01001000		; .X..X...
	byte %01000100		; .X...X..
	byte %01000010		; .X....X.
	byte %00000000		; ........
; char $c
	byte %01000000		; .X......
	byte %01000000		; .X......
	byte %01000000		; .X......
	byte %01000000		; .X......
	byte %01000000		; .X......
	byte %01000000		; .X......
	byte %01111110		; .XXXXXX.
	byte %00000000		; ........
; char $d
	byte %01000010		; .X....X.
	byte %01100110		; .XX..XX.
	byte %01011010		; .X.XX.X.
	byte %01011010		; .X.XX.X.
	byte %01000010		; .X....X.
	byte %01000010		; .X....X.
	byte %01000010		; .X....X.
	byte %00000000		; ........
; char $e
	byte %01000010		; .X....X.
	byte %01100010		; .XX...X.
	byte %01010010		; .X.X..X.
	byte %01001010		; .X..X.X.
	byte %01000110		; .X...XX.
	byte %01000010		; .X....X.
	byte %01000010		; .X....X.
	byte %00000000		; ........
; char $f
	byte %00011000		; ...XX...
	byte %00100100		; ..X..X..
	byte %01000010		; .X....X.
	byte %01000010		; .X....X.
	byte %01000010		; .X....X.
	byte %00100100		; ..X..X..
	byte %00011000		; ...XX...
	byte %00000000		; ........
; char $10
	byte %01111100		; .XXXXX..
	byte %01000010		; .X....X.
	byte %01000010		; .X....X.
	byte %01111100		; .XXXXX..
	byte %01000000		; .X......
	byte %01000000		; .X......
	byte %01000000		; .X......
	byte %00000000		; ........
; char $11
	byte %00011000		; ...XX...
	byte %00100100		; ..X..X..
	byte %01000010		; .X....X.
	byte %01000010		; .X....X.
	byte %01001010		; .X..X.X.
	byte %00100100		; ..X..X..
	byte %00011010		; ...XX.X.
	byte %00000000		; ........
; char $12
	byte %01111100		; .XXXXX..
	byte %01000010		; .X....X.
	byte %01000010		; .X....X.
	byte %01111100		; .XXXXX..
	byte %01001000		; .X..X...
	byte %01000100		; .X...X..
	byte %01000010		; .X....X.
	byte %00000000		; ........
; char $13
	byte %00111100		; ..XXXX..
	byte %01000010		; .X....X.
	byte %01000000		; .X......
	byte %00111100		; ..XXXX..
	byte %00000010		; ......X.
	byte %01000010		; .X....X.
	byte %00111100		; ..XXXX..
	byte %00000000		; ........
; char $14
	byte %00111110		; ..XXXXX.
	byte %00001000		; ....X...
	byte %00001000		; ....X...
	byte %00001000		; ....X...
	byte %00001000		; ....X...
	byte %00001000		; ....X...
	byte %00001000		; ....X...
	byte %00000000		; ........
; char $15
	byte %01000010		; .X....X.
	byte %01000010		; .X....X.
	byte %01000010		; .X....X.
	byte %01000010		; .X....X.
	byte %01000010		; .X....X.
	byte %01000010		; .X....X.
	byte %00111100		; ..XXXX..
	byte %00000000		; ........
; char $16
	byte %01000010		; .X....X.
	byte %01000010		; .X....X.
	byte %01000010		; .X....X.
	byte %00100100		; ..X..X..
	byte %00100100		; ..X..X..
	byte %00011000		; ...XX...
	byte %00011000		; ...XX...
	byte %00000000		; ........
; char $17
	byte %01000010		; .X....X.
	byte %01000010		; .X....X.
	byte %01000010		; .X....X.
	byte %01011010		; .X.XX.X.
	byte %01011010		; .X.XX.X.
	byte %01100110		; .XX..XX.
	byte %01000010		; .X....X.
	byte %00000000		; ........
; char $18
	byte %01000010		; .X....X.
	byte %01000010		; .X....X.
	byte %00100100		; ..X..X..
	byte %00011000		; ...XX...
	byte %00100100		; ..X..X..
	byte %01000010		; .X....X.
	byte %01000010		; .X....X.
	byte %00000000		; ........
; char $19
	byte %00100010		; ..X...X.
	byte %00100010		; ..X...X.
	byte %00100010		; ..X...X.
	byte %00011100		; ...XXX..
	byte %00001000		; ....X...
	byte %00001000		; ....X...
	byte %00001000		; ....X...
	byte %00000000		; ........
; char $1a
	byte %01111110		; .XXXXXX.
	byte %00000010		; ......X.
	byte %00000100		; .....X..
	byte %00011000		; ...XX...
	byte %00100000		; ..X.....
	byte %01000000		; .X......
	byte %01111110		; .XXXXXX.
	byte %00000000		; ........
; char $1b
	byte %00111100		; ..XXXX..
	byte %00100000		; ..X.....
	byte %00100000		; ..X.....
	byte %00100000		; ..X.....
	byte %00100000		; ..X.....
	byte %00100000		; ..X.....
	byte %00111100		; ..XXXX..
	byte %00000000		; ........
; char $1c
	byte %00001100		; ....XX..
	byte %00010000		; ...X....
	byte %00010000		; ...X....
	byte %00111100		; ..XXXX..
	byte %00010000		; ...X....
	byte %01110000		; .XXX....
	byte %01101110		; .XX.XXX.
	byte %00000000		; ........
; char $1d
	byte %00111100		; ..XXXX..
	byte %00000100		; .....X..
	byte %00000100		; .....X..
	byte %00000100		; .....X..
	byte %00000100		; .....X..
	byte %00000100		; .....X..
	byte %00111100		; ..XXXX..
	byte %00000000		; ........
; char $1e
	byte %00000000		; ........
	byte %00001000		; ....X...
	byte %00011100		; ...XXX..
	byte %00101010		; ..X.X.X.
	byte %00001000		; ....X...
	byte %00001000		; ....X...
	byte %00001000		; ....X...
	byte %00001000		; ....X...
; char $1f
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00010000		; ...X....
	byte %00100000		; ..X.....
	byte %01111111		; .XXXXXXX
	byte %00100000		; ..X.....
	byte %00010000		; ...X....
	byte %00000000		; ........
; char $20
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
; char $21
	byte %00001000		; ....X...
	byte %00001000		; ....X...
	byte %00001000		; ....X...
	byte %00001000		; ....X...
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00001000		; ....X...
	byte %00000000		; ........
; char $22
	byte %00100100		; ..X..X..
	byte %00100100		; ..X..X..
	byte %00100100		; ..X..X..
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
; char $23
	byte %00100100		; ..X..X..
	byte %00100100		; ..X..X..
	byte %01111110		; .XXXXXX.
	byte %00100100		; ..X..X..
	byte %01111110		; .XXXXXX.
	byte %00100100		; ..X..X..
	byte %00100100		; ..X..X..
	byte %00000000		; ........
; char $24
	byte %00001000		; ....X...
	byte %00011110		; ...XXXX.
	byte %00101000		; ..X.X...
	byte %00011100		; ...XXX..
	byte %00001010		; ....X.X.
	byte %00111100		; ..XXXX..
	byte %00001000		; ....X...
	byte %00000000		; ........
; char $25
	byte %00000000		; ........
	byte %01100010		; .XX...X.
	byte %01100100		; .XX..X..
	byte %00001000		; ....X...
	byte %00010000		; ...X....
	byte %00100110		; ..X..XX.
	byte %01000110		; .X...XX.
	byte %00000000		; ........
; char $26
	byte %00110000		; ..XX....
	byte %01001000		; .X..X...
	byte %01001000		; .X..X...
	byte %00110000		; ..XX....
	byte %01001010		; .X..X.X.
	byte %01000100		; .X...X..
	byte %00111010		; ..XXX.X.
	byte %00000000		; ........
; char $27
	byte %00000100		; .....X..
	byte %00001000		; ....X...
	byte %00010000		; ...X....
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
; char $28
	byte %00000100		; .....X..
	byte %00001000		; ....X...
	byte %00010000		; ...X....
	byte %00010000		; ...X....
	byte %00010000		; ...X....
	byte %00001000		; ....X...
	byte %00000100		; .....X..
	byte %00000000		; ........
; char $29
	byte %00100000		; ..X.....
	byte %00010000		; ...X....
	byte %00001000		; ....X...
	byte %00001000		; ....X...
	byte %00001000		; ....X...
	byte %00010000		; ...X....
	byte %00100000		; ..X.....
	byte %00000000		; ........
; char $2a
	byte %00001000		; ....X...
	byte %00101010		; ..X.X.X.
	byte %00011100		; ...XXX..
	byte %00111110		; ..XXXXX.
	byte %00011100		; ...XXX..
	byte %00101010		; ..X.X.X.
	byte %00001000		; ....X...
	byte %00000000		; ........
; char $2b
	byte %00000000		; ........
	byte %00001000		; ....X...
	byte %00001000		; ....X...
	byte %00111110		; ..XXXXX.
	byte %00001000		; ....X...
	byte %00001000		; ....X...
	byte %00000000		; ........
	byte %00000000		; ........
; char $2c
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00001000		; ....X...
	byte %00001000		; ....X...
	byte %00010000		; ...X....
; char $2d
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %01111110		; .XXXXXX.
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
; char $2e
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00011000		; ...XX...
	byte %00011000		; ...XX...
	byte %00000000		; ........
; char $2f
	byte %00000000		; ........
	byte %00000010		; ......X.
	byte %00000100		; .....X..
	byte %00001000		; ....X...
	byte %00010000		; ...X....
	byte %00100000		; ..X.....
	byte %01000000		; .X......
	byte %00000000		; ........
; char $30
	byte %00111100		; ..XXXX..
	byte %01000010		; .X....X.
	byte %01000110		; .X...XX.
	byte %01011010		; .X.XX.X.
	byte %01100010		; .XX...X.
	byte %01000010		; .X....X.
	byte %00111100		; ..XXXX..
	byte %00000000		; ........
; char $31
	byte %00001000		; ....X...
	byte %00011000		; ...XX...
	byte %00101000		; ..X.X...
	byte %00001000		; ....X...
	byte %00001000		; ....X...
	byte %00001000		; ....X...
	byte %00111110		; ..XXXXX.
	byte %00000000		; ........
; char $32
	byte %00111100		; ..XXXX..
	byte %01000010		; .X....X.
	byte %00000010		; ......X.
	byte %00001100		; ....XX..
	byte %00110000		; ..XX....
	byte %01000000		; .X......
	byte %01111110		; .XXXXXX.
	byte %00000000		; ........
; char $33
	byte %00111100		; ..XXXX..
	byte %01000010		; .X....X.
	byte %00000010		; ......X.
	byte %00011100		; ...XXX..
	byte %00000010		; ......X.
	byte %01000010		; .X....X.
	byte %00111100		; ..XXXX..
	byte %00000000		; ........
; char $34
	byte %00000100		; .....X..
	byte %00001100		; ....XX..
	byte %00010100		; ...X.X..
	byte %00100100		; ..X..X..
	byte %01111110		; .XXXXXX.
	byte %00000100		; .....X..
	byte %00000100		; .....X..
	byte %00000000		; ........
; char $35
	byte %01111110		; .XXXXXX.
	byte %01000000		; .X......
	byte %01111000		; .XXXX...
	byte %00000100		; .....X..
	byte %00000010		; ......X.
	byte %01000100		; .X...X..
	byte %00111000		; ..XXX...
	byte %00000000		; ........
; char $36
	byte %00011100		; ...XXX..
	byte %00100000		; ..X.....
	byte %01000000		; .X......
	byte %01111100		; .XXXXX..
	byte %01000010		; .X....X.
	byte %01000010		; .X....X.
	byte %00111100		; ..XXXX..
	byte %00000000		; ........
; char $37
	byte %01111110		; .XXXXXX.
	byte %01000010		; .X....X.
	byte %00000100		; .....X..
	byte %00001000		; ....X...
	byte %00010000		; ...X....
	byte %00010000		; ...X....
	byte %00010000		; ...X....
	byte %00000000		; ........
; char $38
	byte %00111100		; ..XXXX..
	byte %01000010		; .X....X.
	byte %01000010		; .X....X.
	byte %00111100		; ..XXXX..
	byte %01000010		; .X....X.
	byte %01000010		; .X....X.
	byte %00111100		; ..XXXX..
	byte %00000000		; ........
; char $39
	byte %00111100		; ..XXXX..
	byte %01000010		; .X....X.
	byte %01000010		; .X....X.
	byte %00111110		; ..XXXXX.
	byte %00000010		; ......X.
	byte %00000100		; .....X..
	byte %00111000		; ..XXX...
	byte %00000000		; ........
; char $3a
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00001000		; ....X...
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00001000		; ....X...
	byte %00000000		; ........
	byte %00000000		; ........
; char $3b
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00001000		; ....X...
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00001000		; ....X...
	byte %00001000		; ....X...
	byte %00010000		; ...X....
; char $3c
	byte %00001110		; ....XXX.
	byte %00011000		; ...XX...
	byte %00110000		; ..XX....
	byte %01100000		; .XX.....
	byte %00110000		; ..XX....
	byte %00011000		; ...XX...
	byte %00001110		; ....XXX.
	byte %00000000		; ........
; char $3d
	byte %00000000		; ........
	byte %00000000		; ........
	byte %01111110		; .XXXXXX.
	byte %00000000		; ........
	byte %01111110		; .XXXXXX.
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
; char $3e
	byte %01110000		; .XXX....
	byte %00011000		; ...XX...
	byte %00001100		; ....XX..
	byte %00000110		; .....XX.
	byte %00001100		; ....XX..
	byte %00011000		; ...XX...
	byte %01110000		; .XXX....
	byte %00000000		; ........
; char $3f
	byte %00111100		; ..XXXX..
	byte %01000010		; .X....X.
	byte %00000010		; ......X.
	byte %00001100		; ....XX..
	byte %00010000		; ...X....
	byte %00000000		; ........
	byte %00010000		; ...X....
	byte %00000000		; ........
; char $40
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
; char $41
	byte %10000000		; X.......
	byte %10000000		; X.......
	byte %10000000		; X.......
	byte %10000000		; X.......
	byte %10000000		; X.......
	byte %10000000		; X.......
	byte %10000000		; X.......
	byte %10000000		; X.......
; char $42
	byte %11000000		; XX......
	byte %11000000		; XX......
	byte %11000000		; XX......
	byte %11000000		; XX......
	byte %11000000		; XX......
	byte %11000000		; XX......
	byte %11000000		; XX......
	byte %11000000		; XX......
; char $43
	byte %11100000		; XXX.....
	byte %11100000		; XXX.....
	byte %11100000		; XXX.....
	byte %11100000		; XXX.....
	byte %11100000		; XXX.....
	byte %11100000		; XXX.....
	byte %11100000		; XXX.....
	byte %11100000		; XXX.....
; char $44
	byte %11110000		; XXXX....
	byte %11110000		; XXXX....
	byte %11110000		; XXXX....
	byte %11110000		; XXXX....
	byte %11110000		; XXXX....
	byte %11110000		; XXXX....
	byte %11110000		; XXXX....
	byte %11110000		; XXXX....
; char $45
	byte %11111000		; XXXXX...
	byte %11111000		; XXXXX...
	byte %11111000		; XXXXX...
	byte %11111000		; XXXXX...
	byte %11111000		; XXXXX...
	byte %11111000		; XXXXX...
	byte %11111000		; XXXXX...
	byte %11111000		; XXXXX...
; char $46
	byte %11111100		; XXXXXX..
	byte %11111100		; XXXXXX..
	byte %11111100		; XXXXXX..
	byte %11111100		; XXXXXX..
	byte %11111100		; XXXXXX..
	byte %11111100		; XXXXXX..
	byte %11111100		; XXXXXX..
	byte %11111100		; XXXXXX..
; char $47
	byte %11111110		; XXXXXXX.
	byte %11111110		; XXXXXXX.
	byte %11111110		; XXXXXXX.
	byte %11111110		; XXXXXXX.
	byte %11111110		; XXXXXXX.
	byte %11111110		; XXXXXXX.
	byte %11111110		; XXXXXXX.
	byte %11111110		; XXXXXXX.
; char $48
	byte %00000000		; ........
	byte %00111100		; ..XXXX..
	byte %01111110		; .XXXXXX.
	byte %01111110		; .XXXXXX.
	byte %01111110		; .XXXXXX.
	byte %01111110		; .XXXXXX.
	byte %00111100		; ..XXXX..
	byte %00000000		; ........
; char $49
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %11100000		; XXX.....
	byte %00010000		; ...X....
	byte %00001000		; ....X...
	byte %00001000		; ....X...
; char $4a
	byte %00001000		; ....X...
	byte %00001000		; ....X...
	byte %00001000		; ....X...
	byte %00000100		; .....X..
	byte %00000011		; ......XX
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
; char $4b
	byte %00001000		; ....X...
	byte %00001000		; ....X...
	byte %00001000		; ....X...
	byte %00010000		; ...X....
	byte %11100000		; XXX.....
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
; char $4c
	byte %10000000		; X.......
	byte %10000000		; X.......
	byte %10000000		; X.......
	byte %10000000		; X.......
	byte %10000000		; X.......
	byte %10000000		; X.......
	byte %10000000		; X.......
	byte %11111111		; XXXXXXXX
; char $4d
	byte %10000000		; X.......
	byte %01000000		; .X......
	byte %00100000		; ..X.....
	byte %00010000		; ...X....
	byte %00001000		; ....X...
	byte %00000100		; .....X..
	byte %00000010		; ......X.
	byte %00000001		; .......X
; char $4e
	byte %00000001		; .......X
	byte %00000010		; ......X.
	byte %00000100		; .....X..
	byte %00001000		; ....X...
	byte %00010000		; ...X....
	byte %00100000		; ..X.....
	byte %01000000		; .X......
	byte %10000000		; X.......
; char $4f
	byte %11111111		; XXXXXXXX
	byte %10000000		; X.......
	byte %10000000		; X.......
	byte %10000000		; X.......
	byte %10000000		; X.......
	byte %10000000		; X.......
	byte %10000000		; X.......
	byte %10000000		; X.......
; char $50
	byte %11111111		; XXXXXXXX
	byte %00000001		; .......X
	byte %00000001		; .......X
	byte %00000001		; .......X
	byte %00000001		; .......X
	byte %00000001		; .......X
	byte %00000001		; .......X
	byte %00000001		; .......X
; char $51
	byte %00000000		; ........
	byte %01100110		; .XX..XX.
	byte %01100110		; .XX..XX.
	byte %01100110		; .XX..XX.
	byte %01100110		; .XX..XX.
	byte %01100110		; .XX..XX.
	byte %01100110		; .XX..XX.
	byte %00000000		; ........
; char $52
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %11111111		; XXXXXXXX
	byte %00000000		; ........
; char $53
	byte %00110110		; ..XX.XX.
	byte %01111111		; .XXXXXXX
	byte %01111111		; .XXXXXXX
	byte %01111111		; .XXXXXXX
	byte %00111110		; ..XXXXX.
	byte %00011100		; ...XXX..
	byte %00001000		; ....X...
	byte %00000000		; ........
; char $54
	byte %01000000		; .X......
	byte %01000000		; .X......
	byte %01000000		; .X......
	byte %01000000		; .X......
	byte %01000000		; .X......
	byte %01000000		; .X......
	byte %01000000		; .X......
	byte %01000000		; .X......
; char $55
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000011		; ......XX
	byte %00000100		; .....X..
	byte %00001000		; ....X...
	byte %00001000		; ....X...
; char $56
	byte %10000001		; X......X
	byte %01000010		; .X....X.
	byte %00100100		; ..X..X..
	byte %00011000		; ...XX...
	byte %00011000		; ...XX...
	byte %00100100		; ..X..X..
	byte %01000010		; .X....X.
	byte %10000001		; X......X
; char $57
	byte %00000000		; ........
	byte %00000110		; .....XX.
	byte %00000110		; .....XX.
	byte %00000110		; .....XX.
	byte %00000110		; .....XX.
	byte %00000110		; .....XX.
	byte %00000110		; .....XX.
	byte %00000000		; ........
; char $58
	byte %00010000		; ...X....
	byte %00111000		; ..XXX...
	byte %00111111		; ..XXXXXX
	byte %00111111		; ..XXXXXX
	byte %00111110		; ..XXXXX.
	byte %00110100		; ..XX.X..
	byte %00011100		; ...XXX..
	byte %00000000		; ........
; char $59
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00110000		; ..XX....
	byte %00111110		; ..XXXXX.
	byte %00111111		; ..XXXXXX
	byte %01101000		; .XX.X...
	byte %00010000		; ...X....
	byte %00000000		; ........
; char $5a
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00010000		; ...X....
	byte %00111100		; ..XXXX..
	byte %00011100		; ...XXX..
	byte %00001000		; ....X...
	byte %00000000		; ........
	byte %00000000		; ........
; char $5b
	byte %00000000		; ........
	byte %00010000		; ...X....
	byte %00101000		; ..X.X...
	byte %00010000		; ...X....
	byte %01111100		; .XXXXX..
	byte %00010000		; ...X....
	byte %00101000		; ..X.X...
	byte %01000100		; .X...X..
; char $5c
	byte %11111111		; XXXXXXXX
	byte %11111111		; XXXXXXXX
	byte %11111111		; XXXXXXXX
	byte %11111111		; XXXXXXXX
	byte %11111111		; XXXXXXXX
	byte %11111111		; XXXXXXXX
	byte %11111111		; XXXXXXXX
	byte %11111111		; XXXXXXXX
; char $5d
	byte %00001000		; ....X...
	byte %00001000		; ....X...
	byte %00001000		; ....X...
	byte %00001000		; ....X...
	byte %00001000		; ....X...
	byte %00001000		; ....X...
	byte %00001000		; ....X...
	byte %00001000		; ....X...
; char $5e
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000001		; .......X
	byte %00111110		; ..XXXXX.
	byte %01010100		; .X.X.X..
	byte %00010100		; ...X.X..
	byte %00010100		; ...X.X..
	byte %00000000		; ........
; char $5f
	byte %11111111		; XXXXXXXX
	byte %01111111		; .XXXXXXX
	byte %00111111		; ..XXXXXX
	byte %00011111		; ...XXXXX
	byte %00001111		; ....XXXX
	byte %00000111		; .....XXX
	byte %00000011		; ......XX
	byte %00000001		; .......X
; char $60
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
; char $61
	byte %11110000		; XXXX....
	byte %11110000		; XXXX....
	byte %11110000		; XXXX....
	byte %11110000		; XXXX....
	byte %11110000		; XXXX....
	byte %11110000		; XXXX....
	byte %11110000		; XXXX....
	byte %11110000		; XXXX....
; char $62
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %11111111		; XXXXXXXX
	byte %11111111		; XXXXXXXX
	byte %11111111		; XXXXXXXX
	byte %11111111		; XXXXXXXX
; char $63
	byte %11111111		; XXXXXXXX
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
; char $64
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %11111111		; XXXXXXXX
; char $65
	byte %10000000		; X.......
	byte %10000000		; X.......
	byte %10000000		; X.......
	byte %10000000		; X.......
	byte %10000000		; X.......
	byte %10000000		; X.......
	byte %10000000		; X.......
	byte %10000000		; X.......
; char $66
	byte %10101010		; X.X.X.X.
	byte %01010101		; .X.X.X.X
	byte %10101010		; X.X.X.X.
	byte %01010101		; .X.X.X.X
	byte %10101010		; X.X.X.X.
	byte %01010101		; .X.X.X.X
	byte %10101010		; X.X.X.X.
	byte %01010101		; .X.X.X.X
; char $67
	byte %00000001		; .......X
	byte %00000001		; .......X
	byte %00000001		; .......X
	byte %00000001		; .......X
	byte %00000001		; .......X
	byte %00000001		; .......X
	byte %00000001		; .......X
	byte %00000001		; .......X
; char $68
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %10101010		; X.X.X.X.
	byte %01010101		; .X.X.X.X
	byte %10101010		; X.X.X.X.
	byte %01010101		; .X.X.X.X
; char $69
	byte %11111111		; XXXXXXXX
	byte %11111110		; XXXXXXX.
	byte %11111100		; XXXXXX..
	byte %11111000		; XXXXX...
	byte %11110000		; XXXX....
	byte %11100000		; XXX.....
	byte %11000000		; XX......
	byte %10000000		; X.......
; char $6a
	byte %00000011		; ......XX
	byte %00000011		; ......XX
	byte %00000011		; ......XX
	byte %00000011		; ......XX
	byte %00000011		; ......XX
	byte %00000011		; ......XX
	byte %00000011		; ......XX
	byte %00000011		; ......XX
; char $6b
	byte %00001000		; ....X...
	byte %00001000		; ....X...
	byte %00001000		; ....X...
	byte %00001000		; ....X...
	byte %00001111		; ....XXXX
	byte %00001000		; ....X...
	byte %00001000		; ....X...
	byte %00001000		; ....X...
; char $6c
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00001111		; ....XXXX
	byte %00001111		; ....XXXX
	byte %00001111		; ....XXXX
	byte %00001111		; ....XXXX
; char $6d
	byte %00001000		; ....X...
	byte %00001000		; ....X...
	byte %00001000		; ....X...
	byte %00001000		; ....X...
	byte %00001111		; ....XXXX
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
; char $6e
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %11111000		; XXXXX...
	byte %00001000		; ....X...
	byte %00001000		; ....X...
	byte %00001000		; ....X...
; char $6f
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %11111111		; XXXXXXXX
	byte %11111111		; XXXXXXXX
; char $70
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00001111		; ....XXXX
	byte %00001000		; ....X...
	byte %00001000		; ....X...
	byte %00001000		; ....X...
; char $71
	byte %00001000		; ....X...
	byte %00001000		; ....X...
	byte %00001000		; ....X...
	byte %00001000		; ....X...
	byte %11111111		; XXXXXXXX
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
; char $72
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %11111111		; XXXXXXXX
	byte %00001000		; ....X...
	byte %00001000		; ....X...
	byte %00001000		; ....X...
; char $73
	byte %00001000		; ....X...
	byte %00001000		; ....X...
	byte %00001000		; ....X...
	byte %00001000		; ....X...
	byte %11111000		; XXXXX...
	byte %00001000		; ....X...
	byte %00001000		; ....X...
	byte %00001000		; ....X...
; char $74
	byte %11000000		; XX......
	byte %11000000		; XX......
	byte %11000000		; XX......
	byte %11000000		; XX......
	byte %11000000		; XX......
	byte %11000000		; XX......
	byte %11000000		; XX......
	byte %11000000		; XX......
; char $75
	byte %11100000		; XXX.....
	byte %11100000		; XXX.....
	byte %11100000		; XXX.....
	byte %11100000		; XXX.....
	byte %11100000		; XXX.....
	byte %11100000		; XXX.....
	byte %11100000		; XXX.....
	byte %11100000		; XXX.....
; char $76
	byte %00000111		; .....XXX
	byte %00000111		; .....XXX
	byte %00000111		; .....XXX
	byte %00000111		; .....XXX
	byte %00000111		; .....XXX
	byte %00000111		; .....XXX
	byte %00000111		; .....XXX
	byte %00000111		; .....XXX
; char $77
	byte %11111111		; XXXXXXXX
	byte %11111111		; XXXXXXXX
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
; char $78
	byte %11111111		; XXXXXXXX
	byte %11111111		; XXXXXXXX
	byte %11111111		; XXXXXXXX
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
; char $79
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %11111111		; XXXXXXXX
	byte %11111111		; XXXXXXXX
	byte %11111111		; XXXXXXXX
; char $7a
	byte %00000001		; .......X
	byte %00000001		; .......X
	byte %00000001		; .......X
	byte %00000001		; .......X
	byte %00000001		; .......X
	byte %00000001		; .......X
	byte %00000001		; .......X
	byte %11111111		; XXXXXXXX
; char $7b
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %11110000		; XXXX....
	byte %11110000		; XXXX....
	byte %11110000		; XXXX....
	byte %11110000		; XXXX....
; char $7c
	byte %00001111		; ....XXXX
	byte %00001111		; ....XXXX
	byte %00001111		; ....XXXX
	byte %00001111		; ....XXXX
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
; char $7d
	byte %00001000		; ....X...
	byte %00001000		; ....X...
	byte %00001000		; ....X...
	byte %00001000		; ....X...
	byte %11111000		; XXXXX...
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
; char $7e
	byte %11110000		; XXXX....
	byte %11110000		; XXXX....
	byte %11110000		; XXXX....
	byte %11110000		; XXXX....
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
; char $7f
	byte %11110000		; XXXX....
	byte %11110000		; XXXX....
	byte %11110000		; XXXX....
	byte %11110000		; XXXX....
	byte %00001111		; ....XXXX
	byte %00001111		; ....XXXX
	byte %00001111		; ....XXXX
	byte %00001111		; ....XXXX
; char $80
	byte %00011100		; ...XXX..
	byte %00101010		; ..X.X.X.
	byte %00011100		; ...XXX..
	byte %00001001		; ....X..X
	byte %00111110		; ..XXXXX.
	byte %01011101		; .X.XXX.X
	byte %00111111		; ..XXXXXX
	byte %01100000		; .XX.....
; char $81
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
; char $82
	byte %00000000		; ........
	byte %00011100		; ...XXX..
	byte %00101010		; ..X.X.X.
	byte %00011100		; ...XXX..
	byte %00001000		; ....X...
	byte %01111111		; .XXXXXXX
	byte %00011100		; ...XXX..
	byte %01111111		; .XXXXXXX
; char $83
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
; char $84
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00011100		; ...XXX..
	byte %00101010		; ..X.X.X.
	byte %00011100		; ...XXX..
	byte %01001000		; .X..X...
	byte %00111110		; ..XXXXX.
	byte %01011101		; .X.XXX.X
; char $85
	byte %01111110		; .XXXXXX.
	byte %00000011		; ......XX
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
; char $86
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00011100		; ...XXX..
	byte %00101010		; ..X.X.X.
	byte %00011100		; ...XXX..
	byte %00001000		; ....X...
	byte %01111111		; .XXXXXXX
; char $87
	byte %00011100		; ...XXX..
	byte %01111111		; .XXXXXXX
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
; char $88
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00011100		; ...XXX..
	byte %00101010		; ..X.X.X.
	byte %00011100		; ...XXX..
	byte %00001001		; ....X..X
; char $89
	byte %00111110		; ..XXXXX.
	byte %01011101		; .X.XXX.X
	byte %00111111		; ..XXXXXX
	byte %01100000		; .XX.....
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
; char $8a
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00011100		; ...XXX..
	byte %00101010		; ..X.X.X.
	byte %00011100		; ...XXX..
; char $8b
	byte %00001000		; ....X...
	byte %01111111		; .XXXXXXX
	byte %00011100		; ...XXX..
	byte %01111111		; .XXXXXXX
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
; char $8c
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00011100		; ...XXX..
	byte %00101010		; ..X.X.X.
; char $8d
	byte %00011100		; ...XXX..
	byte %01001000		; .X..X...
	byte %00111110		; ..XXXXX.
	byte %01011101		; .X.XXX.X
	byte %01111110		; .XXXXXX.
	byte %00000011		; ......XX
	byte %00000000		; ........
	byte %00000000		; ........
; char $8e
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00011100		; ...XXX..
; char $8f
	byte %00101010		; ..X.X.X.
	byte %00011100		; ...XXX..
	byte %00001000		; ....X...
	byte %01111111		; .XXXXXXX
	byte %00011100		; ...XXX..
	byte %01111111		; .XXXXXXX
	byte %00000000		; ........
	byte %00000000		; ........
; char $90
	byte %00010110		; ...X.XX.
	byte %01001010		; .X..X.X.
	byte %10101110		; X.X.XXX.
	byte %11111110		; XXXXXXX.
	byte %10101110		; X.X.XXX.
	byte %01001011		; .X..X.XX
	byte %00000101		; .....X.X
	byte %00000000		; ........
; char $91
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
; char $92
	byte %00000101		; .....X.X
	byte %00100101		; ..X..X.X
	byte %01010111		; .X.X.XXX
	byte %01111111		; .XXXXXXX
	byte %01010111		; .X.X.XXX
	byte %00100101		; ..X..X.X
	byte %00000101		; .....X.X
	byte %00000000		; ........
; char $93
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
; char $94
	byte %00000001		; .......X
	byte %00010010		; ...X..X.
	byte %00101011		; ..X.X.XX
	byte %00111111		; ..XXXXXX
	byte %00101011		; ..X.X.XX
	byte %00010010		; ...X..X.
	byte %00000100		; .....X..
	byte %00000000		; ........
; char $95
	byte %01000000		; .X......
	byte %11000000		; XX......
	byte %10000000		; X.......
	byte %10000000		; X.......
	byte %10000000		; X.......
	byte %10000000		; X.......
	byte %10000000		; X.......
	byte %00000000		; ........
; char $96
	byte %00000001		; .......X
	byte %00001001		; ....X..X
	byte %00010101		; ...X.X.X
	byte %00011111		; ...XXXXX
	byte %00010101		; ...X.X.X
	byte %00001001		; ....X..X
	byte %00000001		; .......X
	byte %00000000		; ........
; char $97
	byte %01000000		; .X......
	byte %01000000		; .X......
	byte %11000000		; XX......
	byte %11000000		; XX......
	byte %11000000		; XX......
	byte %01000000		; .X......
	byte %01000000		; .X......
	byte %00000000		; ........
; char $98
	byte %00000001		; .......X
	byte %00000100		; .....X..
	byte %00001010		; ....X.X.
	byte %00001111		; ....XXXX
	byte %00001010		; ....X.X.
	byte %00000100		; .....X..
	byte %00000000		; ........
	byte %00000000		; ........
; char $99
	byte %01100000		; .XX.....
	byte %10100000		; X.X.....
	byte %11100000		; XXX.....
	byte %11100000		; XXX.....
	byte %11100000		; XXX.....
	byte %10110000		; X.XX....
	byte %01010000		; .X.X....
	byte %00000000		; ........
; char $9a
	byte %00000000		; ........
	byte %00000010		; ......X.
	byte %00000101		; .....X.X
	byte %00000111		; .....XXX
	byte %00000101		; .....X.X
	byte %00000010		; ......X.
	byte %00000000		; ........
	byte %00000000		; ........
; char $9b
	byte %01010000		; .X.X....
	byte %01010000		; .X.X....
	byte %01110000		; .XXX....
	byte %11110000		; XXXX....
	byte %01110000		; .XXX....
	byte %01010000		; .X.X....
	byte %01010000		; .X.X....
	byte %00000000		; ........
; char $9c
	byte %00000000		; ........
	byte %00000001		; .......X
	byte %00000010		; ......X.
	byte %00000011		; ......XX
	byte %00000010		; ......X.
	byte %00000001		; .......X
	byte %00000000		; ........
	byte %00000000		; ........
; char $9d
	byte %00010100		; ...X.X..
	byte %00101100		; ..X.XX..
	byte %10111000		; X.XXX...
	byte %11111000		; XXXXX...
	byte %10111000		; X.XXX...
	byte %00101000		; ..X.X...
	byte %01011000		; .X.XX...
	byte %00000000		; ........
; char $9e
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000001		; .......X
	byte %00000001		; .......X
	byte %00000001		; .......X
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
; char $9f
	byte %00010100		; ...X.X..
	byte %10010100		; X..X.X..
	byte %01011100		; .X.XXX..
	byte %11111100		; XXXXXX..
	byte %01011100		; .X.XXX..
	byte %10010100		; X..X.X..
	byte %00010100		; ...X.X..
	byte %00000000		; ........
; char $a0
	byte %00000000		; ........
	byte %10100000		; X.X.....
	byte %11010010		; XX.X..X.
	byte %01110101		; .XXX.X.X
	byte %01111111		; .XXXXXXX
	byte %01110101		; .XXX.X.X
	byte %01010010		; .X.X..X.
	byte %01101000		; .XX.X...
; char $a1
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
; char $a2
	byte %00000000		; ........
	byte %10100000		; X.X.....
	byte %10100100		; X.X..X..
	byte %11101010		; XXX.X.X.
	byte %11111110		; XXXXXXX.
	byte %11101010		; XXX.X.X.
	byte %10100100		; X.X..X..
	byte %10100000		; X.X.....
; char $a3
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
; char $a4
	byte %00000000		; ........
	byte %00100000		; ..X.....
	byte %01001000		; .X..X...
	byte %11010100		; XX.X.X..
	byte %11111100		; XXXXXX..
	byte %11010100		; XX.X.X..
	byte %01001000		; .X..X...
	byte %10000000		; X.......
; char $a5
	byte %00000000		; ........
	byte %00000001		; .......X
	byte %00000001		; .......X
	byte %00000001		; .......X
	byte %00000001		; .......X
	byte %00000001		; .......X
	byte %00000011		; ......XX
	byte %00000010		; ......X.
; char $a6
	byte %00000000		; ........
	byte %00000000		; ........
	byte %10010000		; X..X....
	byte %10101000		; X.X.X...
	byte %11111000		; XXXXX...
	byte %10101000		; X.X.X...
	byte %10010000		; X..X....
	byte %10000000		; X.......
; char $a7
	byte %00000000		; ........
	byte %00000010		; ......X.
	byte %00000010		; ......X.
	byte %00000011		; ......XX
	byte %00000011		; ......XX
	byte %00000011		; ......XX
	byte %00000010		; ......X.
	byte %00000010		; ......X.
; char $a8
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00100000		; ..X.....
	byte %01010000		; .X.X....
	byte %11110000		; XXXX....
	byte %01010000		; .X.X....
	byte %00100000		; ..X.....
	byte %10000000		; X.......
; char $a9
	byte %00000000		; ........
	byte %00001010		; ....X.X.
	byte %00001101		; ....XX.X
	byte %00000111		; .....XXX
	byte %00000111		; .....XXX
	byte %00000111		; .....XXX
	byte %00000101		; .....X.X
	byte %00000110		; .....XX.
; char $aa
	byte %00000000		; ........
	byte %00000000		; ........
	byte %01000000		; .X......
	byte %10100000		; X.X.....
	byte %11100000		; XXX.....
	byte %10100000		; X.X.....
	byte %01000000		; .X......
	byte %00000000		; ........
; char $ab
	byte %00000000		; ........
	byte %00001010		; ....X.X.
	byte %00001010		; ....X.X.
	byte %00001110		; ....XXX.
	byte %00001111		; ....XXXX
	byte %00001110		; ....XXX.
	byte %00001010		; ....X.X.
	byte %00001010		; ....X.X.
; char $ac
	byte %00000000		; ........
	byte %00000000		; ........
	byte %10000000		; X.......
	byte %01000000		; .X......
	byte %11000000		; XX......
	byte %01000000		; .X......
	byte %10000000		; X.......
	byte %00000000		; ........
; char $ad
	byte %00000000		; ........
	byte %00011010		; ...XX.X.
	byte %00010100		; ...X.X..
	byte %00011101		; ...XXX.X
	byte %00011111		; ...XXXXX
	byte %00011101		; ...XXX.X
	byte %00110100		; ..XX.X..
	byte %00101000		; ..X.X...
; char $ae
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %10000000		; X.......
	byte %10000000		; X.......
	byte %10000000		; X.......
	byte %00000000		; ........
	byte %00000000		; ........
; char $af
	byte %00000000		; ........
	byte %00101000		; ..X.X...
	byte %00101001		; ..X.X..X
	byte %00111010		; ..XXX.X.
	byte %00111111		; ..XXXXXX
	byte %00111010		; ..XXX.X.
	byte %00101001		; ..X.X..X
	byte %00101000		; ..X.X...
; char $b0
	byte %01100000		; .XX.....
	byte %00111111		; ..XXXXXX
	byte %01011101		; .X.XXX.X
	byte %00111110		; ..XXXXX.
	byte %00001001		; ....X..X
	byte %00011100		; ...XXX..
	byte %00101010		; ..X.X.X.
	byte %00011100		; ...XXX..
; char $b1
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
; char $b2
	byte %00000000		; ........
	byte %00000000		; ........
	byte %01111111		; .XXXXXXX
	byte %00011100		; ...XXX..
	byte %01111111		; .XXXXXXX
	byte %00001000		; ....X...
	byte %00011100		; ...XXX..
	byte %00101010		; ..X.X.X.
; char $b3
	byte %00011100		; ...XXX..
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
; char $b4
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000011		; ......XX
	byte %01111110		; .XXXXXX.
	byte %01011101		; .X.XXX.X
	byte %00111110		; ..XXXXX.
	byte %01001000		; .X..X...
	byte %00011100		; ...XXX..
; char $b5
	byte %00101010		; ..X.X.X.
	byte %00011100		; ...XXX..
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
; char $b6
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %01111111		; .XXXXXXX
	byte %00011100		; ...XXX..
	byte %01111111		; .XXXXXXX
	byte %00001000		; ....X...
; char $b7
	byte %00011100		; ...XXX..
	byte %00101010		; ..X.X.X.
	byte %00011100		; ...XXX..
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
; char $b8
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %01100000		; .XX.....
	byte %00111111		; ..XXXXXX
	byte %01011101		; .X.XXX.X
	byte %00111110		; ..XXXXX.
; char $b9
	byte %00001001		; ....X..X
	byte %00011100		; ...XXX..
	byte %00101010		; ..X.X.X.
	byte %00011100		; ...XXX..
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
; char $ba
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %01111111		; .XXXXXXX
	byte %00011100		; ...XXX..
; char $bb
	byte %01111111		; .XXXXXXX
	byte %00001000		; ....X...
	byte %00011100		; ...XXX..
	byte %00101010		; ..X.X.X.
	byte %00011100		; ...XXX..
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
; char $bc
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000011		; ......XX
	byte %01111110		; .XXXXXX.
; char $bd
	byte %01011101		; .X.XXX.X
	byte %00111110		; ..XXXXX.
	byte %01001000		; .X..X...
	byte %00011100		; ...XXX..
	byte %00101010		; ..X.X.X.
	byte %00011100		; ...XXX..
	byte %00000000		; ........
	byte %00000000		; ........
; char $be
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
; char $bf
	byte %01111111		; .XXXXXXX
	byte %00011100		; ...XXX..
	byte %01111111		; .XXXXXXX
	byte %00001000		; ....X...
	byte %00011100		; ...XXX..
	byte %00101010		; ..X.X.X.
	byte %00011100		; ...XXX..
	byte %00000000		; ........
; char $c0
	byte %00010100		; ...X.X..
	byte %00011100		; ...XXX..
	byte %00101010		; ..X.X.X.
	byte %01111111		; .XXXXXXX
	byte %00111110		; ..XXXXX.
	byte %00111110		; ..XXXXX.
	byte %00011100		; ...XXX..
	byte %00100000		; ..X.....
; char $c1
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
; char $c2
	byte %00000000		; ........
	byte %00010100		; ...X.X..
	byte %00011100		; ...XXX..
	byte %00101010		; ..X.X.X.
	byte %01111111		; .XXXXXXX
	byte %00111110		; ..XXXXX.
	byte %00111110		; ..XXXXX.
	byte %00011100		; ...XXX..
; char $c3
	byte %00010000		; ...X....
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
; char $c4
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00010100		; ...X.X..
	byte %00011100		; ...XXX..
	byte %00101010		; ..X.X.X.
	byte %01111111		; .XXXXXXX
	byte %00111110		; ..XXXXX.
	byte %00111110		; ..XXXXX.
; char $c5
	byte %00011100		; ...XXX..
	byte %00001000		; ....X...
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
; char $c6
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00010100		; ...X.X..
	byte %00011100		; ...XXX..
	byte %00101010		; ..X.X.X.
	byte %01111111		; .XXXXXXX
	byte %00111110		; ..XXXXX.
; char $c7
	byte %00111110		; ..XXXXX.
	byte %00011100		; ...XXX..
	byte %00000100		; .....X..
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
; char $c8
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00010100		; ...X.X..
	byte %00011100		; ...XXX..
	byte %00101010		; ..X.X.X.
	byte %01111111		; .XXXXXXX
; char $c9
	byte %00111110		; ..XXXXX.
	byte %00111110		; ..XXXXX.
	byte %00011100		; ...XXX..
	byte %00000010		; ......X.
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
; char $ca
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00010100		; ...X.X..
	byte %00011100		; ...XXX..
	byte %00101010		; ..X.X.X.
; char $cb
	byte %01111111		; .XXXXXXX
	byte %00111110		; ..XXXXX.
	byte %00111110		; ..XXXXX.
	byte %00011100		; ...XXX..
	byte %00000100		; .....X..
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
; char $cc
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00010100		; ...X.X..
	byte %00011100		; ...XXX..
; char $cd
	byte %00101010		; ..X.X.X.
	byte %01111111		; .XXXXXXX
	byte %00111110		; ..XXXXX.
	byte %00111110		; ..XXXXX.
	byte %00011100		; ...XXX..
	byte %00001000		; ....X...
	byte %00000000		; ........
	byte %00000000		; ........
; char $ce
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00010100		; ...X.X..
; char $cf
	byte %00011100		; ...XXX..
	byte %00101010		; ..X.X.X.
	byte %01111111		; .XXXXXXX
	byte %00111110		; ..XXXXX.
	byte %00111110		; ..XXXXX.
	byte %00011100		; ...XXX..
	byte %00010000		; ...X....
	byte %00000000		; ........
; char $d0
	byte %00010000		; ...X....
	byte %00111100		; ..XXXX..
	byte %11011110		; XX.XXXX.
	byte %01111110		; .XXXXXX.
	byte %11011110		; XX.XXXX.
	byte %00111101		; ..XXXX.X
	byte %00010000		; ...X....
	byte %00000000		; ........
; char $d1
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
; char $d2
	byte %00001000		; ....X...
	byte %00011110		; ...XXXX.
	byte %01101111		; .XX.XXXX
	byte %00111111		; ..XXXXXX
	byte %01101111		; .XX.XXXX
	byte %00011110		; ...XXXX.
	byte %00001000		; ....X...
	byte %00000000		; ........
; char $d3
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %10000000		; X.......
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
; char $d4
	byte %00000100		; .....X..
	byte %00001111		; ....XXXX
	byte %00110111		; ..XX.XXX
	byte %00011111		; ...XXXXX
	byte %00110111		; ..XX.XXX
	byte %00001111		; ....XXXX
	byte %00000100		; .....X..
	byte %00000000		; ........
; char $d5
	byte %00000000		; ........
	byte %00000000		; ........
	byte %10000000		; X.......
	byte %11000000		; XX......
	byte %10000000		; X.......
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
; char $d6
	byte %00000010		; ......X.
	byte %00000111		; .....XXX
	byte %00011011		; ...XX.XX
	byte %00001111		; ....XXXX
	byte %00011011		; ...XX.XX
	byte %00000111		; .....XXX
	byte %00000010		; ......X.
	byte %00000000		; ........
; char $d7
	byte %00000000		; ........
	byte %10000000		; X.......
	byte %11100000		; XXX.....
	byte %11000000		; XX......
	byte %11000000		; XX......
	byte %10000000		; X.......
	byte %00000000		; ........
	byte %00000000		; ........
; char $d8
	byte %00000001		; .......X
	byte %00000011		; ......XX
	byte %00001101		; ....XX.X
	byte %00000111		; .....XXX
	byte %00001101		; ....XX.X
	byte %00000011		; ......XX
	byte %00000001		; .......X
	byte %00000000		; ........
; char $d9
	byte %00000000		; ........
	byte %11010000		; XX.X....
	byte %11100000		; XXX.....
	byte %11100000		; XXX.....
	byte %11100000		; XXX.....
	byte %11000000		; XX......
	byte %00000000		; ........
	byte %00000000		; ........
; char $da
	byte %00000000		; ........
	byte %00000001		; .......X
	byte %00000110		; .....XX.
	byte %00000011		; ......XX
	byte %00000110		; .....XX.
	byte %00000001		; .......X
	byte %00000000		; ........
	byte %00000000		; ........
; char $db
	byte %10000000		; X.......
	byte %11100000		; XXX.....
	byte %11111000		; XXXXX...
	byte %11110000		; XXXX....
	byte %11110000		; XXXX....
	byte %11100000		; XXX.....
	byte %10000000		; X.......
	byte %00000000		; ........
; char $dc
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000011		; ......XX
	byte %00000001		; .......X
	byte %00000011		; ......XX
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
; char $dd
	byte %01000000		; .X......
	byte %11110000		; XXXX....
	byte %01111000		; .XXXX...
	byte %11111100		; XXXXXX..
	byte %01111000		; .XXXX...
	byte %11110000		; XXXX....
	byte %01000000		; .X......
	byte %00000000		; ........
; char $de
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000001		; .......X
	byte %00000000		; ........
	byte %00000001		; .......X
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
; char $df
	byte %00100000		; ..X.....
	byte %01111000		; .XXXX...
	byte %10111100		; X.XXXX..
	byte %11111100		; XXXXXX..
	byte %10111110		; X.XXXXX.
	byte %01111000		; .XXXX...
	byte %00100000		; ..X.....
	byte %00000000		; ........
; char $e0
	byte %00000000		; ........
	byte %00001000		; ....X...
	byte %10111100		; X.XXXX..
	byte %01111011		; .XXXX.XX
	byte %01111110		; .XXXXXX.
	byte %01111011		; .XXXX.XX
	byte %00111100		; ..XXXX..
	byte %00001000		; ....X...
; char $e1
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
; char $e2
	byte %00000000		; ........
	byte %00010000		; ...X....
	byte %01111000		; .XXXX...
	byte %11110110		; XXXX.XX.
	byte %11111100		; XXXXXX..
	byte %11110110		; XXXX.XX.
	byte %01111000		; .XXXX...
	byte %00010000		; ...X....
; char $e3
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000001		; .......X
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
; char $e4
	byte %00000000		; ........
	byte %00100000		; ..X.....
	byte %11110000		; XXXX....
	byte %11101100		; XXX.XX..
	byte %11111000		; XXXXX...
	byte %11101100		; XXX.XX..
	byte %11110000		; XXXX....
	byte %00100000		; ..X.....
; char $e5
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000001		; .......X
	byte %00000011		; ......XX
	byte %00000001		; .......X
	byte %00000000		; ........
	byte %00000000		; ........
; char $e6
	byte %00000000		; ........
	byte %01000000		; .X......
	byte %11100000		; XXX.....
	byte %11011000		; XX.XX...
	byte %11110000		; XXXX....
	byte %11011000		; XX.XX...
	byte %11100000		; XXX.....
	byte %01000000		; .X......
; char $e7
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000001		; .......X
	byte %00000011		; ......XX
	byte %00000011		; ......XX
	byte %00000111		; .....XXX
	byte %00000000		; ........
	byte %00000000		; ........
; char $e8
	byte %00000000		; ........
	byte %10000000		; X.......
	byte %11000000		; XX......
	byte %10110000		; X.XX....
	byte %11100000		; XXX.....
	byte %10110000		; X.XX....
	byte %11000000		; XX......
	byte %10000000		; X.......
; char $e9
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000011		; ......XX
	byte %00000111		; .....XXX
	byte %00000111		; .....XXX
	byte %00000111		; .....XXX
	byte %00001011		; ....X.XX
	byte %00000000		; ........
; char $ea
	byte %00000000		; ........
	byte %00000000		; ........
	byte %10000000		; X.......
	byte %01100000		; .XX.....
	byte %11000000		; XX......
	byte %01100000		; .XX.....
	byte %10000000		; X.......
	byte %00000000		; ........
; char $eb
	byte %00000000		; ........
	byte %00000001		; .......X
	byte %00000111		; .....XXX
	byte %00001111		; ....XXXX
	byte %00001111		; ....XXXX
	byte %00011111		; ...XXXXX
	byte %00000111		; .....XXX
	byte %00000001		; .......X
; char $ec
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %11000000		; XX......
	byte %10000000		; X.......
	byte %11000000		; XX......
	byte %00000000		; ........
	byte %00000000		; ........
; char $ed
	byte %00000000		; ........
	byte %00000010		; ......X.
	byte %00001111		; ....XXXX
	byte %00011110		; ...XXXX.
	byte %00111111		; ..XXXXXX
	byte %00011110		; ...XXXX.
	byte %00001111		; ....XXXX
	byte %00000010		; ......X.
; char $ee
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %10000000		; X.......
	byte %00000000		; ........
	byte %10000000		; X.......
	byte %00000000		; ........
	byte %00000000		; ........
; char $ef
	byte %00000000		; ........
	byte %00000100		; .....X..
	byte %00011110		; ...XXXX.
	byte %01111101		; .XXXXX.X
	byte %00111111		; ..XXXXXX
	byte %01111101		; .XXXXX.X
	byte %00011110		; ...XXXX.
	byte %00000100		; .....X..
; char $f0
	byte %00100000		; ..X.....
	byte %00011100		; ...XXX..
	byte %00111110		; ..XXXXX.
	byte %00111110		; ..XXXXX.
	byte %01111111		; .XXXXXXX
	byte %00101010		; ..X.X.X.
	byte %00011100		; ...XXX..
	byte %00010100		; ...X.X..
; char $f1
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
; char $f2
	byte %00011100		; ...XXX..
	byte %00111110		; ..XXXXX.
	byte %00111110		; ..XXXXX.
	byte %01111111		; .XXXXXXX
	byte %00101010		; ..X.X.X.
	byte %00011100		; ...XXX..
	byte %00010100		; ...X.X..
	byte %00000000		; ........
; char $f3
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00010000		; ...X....
; char $f4
	byte %00111110		; ..XXXXX.
	byte %00111110		; ..XXXXX.
	byte %01111111		; .XXXXXXX
	byte %00101010		; ..X.X.X.
	byte %00011100		; ...XXX..
	byte %00010100		; ...X.X..
	byte %00000000		; ........
	byte %00000000		; ........
; char $f5
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00001000		; ....X...
	byte %00011100		; ...XXX..
; char $f6
	byte %00111110		; ..XXXXX.
	byte %01111111		; .XXXXXXX
	byte %00101010		; ..X.X.X.
	byte %00011100		; ...XXX..
	byte %00010100		; ...X.X..
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
; char $f7
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000100		; .....X..
	byte %00011100		; ...XXX..
	byte %00111110		; ..XXXXX.
; char $f8
	byte %01111111		; .XXXXXXX
	byte %00101010		; ..X.X.X.
	byte %00011100		; ...XXX..
	byte %00010100		; ...X.X..
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
; char $f9
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000010		; ......X.
	byte %00011100		; ...XXX..
	byte %00111110		; ..XXXXX.
	byte %00111110		; ..XXXXX.
; char $fa
	byte %00101010		; ..X.X.X.
	byte %00011100		; ...XXX..
	byte %00010100		; ...X.X..
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
; char $fb
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000100		; .....X..
	byte %00011100		; ...XXX..
	byte %00111110		; ..XXXXX.
	byte %00111110		; ..XXXXX.
	byte %01111111		; .XXXXXXX
; char $fc
	byte %00011100		; ...XXX..
	byte %00010100		; ...X.X..
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
; char $fd
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00001000		; ....X...
	byte %00011100		; ...XXX..
	byte %00111110		; ..XXXXX.
	byte %00111110		; ..XXXXX.
	byte %01111111		; .XXXXXXX
	byte %00101010		; ..X.X.X.
; char $fe
	byte %00010100		; ...X.X..
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
	byte %00000000		; ........
; char $ff
	byte %00000000		; ........
	byte %00010000		; ...X....
	byte %00011100		; ...XXX..
	byte %00111110		; ..XXXXX.
	byte %00111110		; ..XXXXX.
	byte %01111111		; .XXXXXXX
	byte %00101010		; ..X.X.X.
	byte %00011100		; ...XXX..

        .byte   $20

IntroScreenData:
        .byte   $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
        .byte   $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
        .byte   $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
        .byte   $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
        .byte   $20,$20,$20,$20,$20,$76,$50,$20,$76,$4D,$20,$76,$20,$20,$76,$4D,$20,$20,$20,$20,$20,$20
        .byte   $20,$20,$20,$20,$20,$76,$63,$4D,$76,$50,$20,$76,$20,$20,$76,$4E,$20,$20,$20,$20,$20,$20
        .byte   $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
        .byte   $20,$20,$20,$20,$20,$20,$20,$20,$76,$50,$20,$76,$4D,$65,$20,$20,$20,$20,$20,$20,$20,$20
        .byte   $20,$20,$20,$20,$20,$20,$20,$20,$76,$7A,$20,$76,$20,$65,$20,$20,$20,$20,$20,$20,$20,$20
        .byte   $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
        .byte   $20,$20,$20,$20,$20,$76,$63,$20,$76,$50,$20,$76,$50,$20,$50,$4F,$20,$20,$20,$20,$20,$20
        .byte   $20,$20,$20,$20,$20,$76,$63,$20,$76,$7A,$20,$76,$63,$4D,$67,$65,$20,$20,$20,$20,$20,$20
        .byte   $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
        .byte   $20,$20,$20,$20,$20,$76,$4E,$20,$76,$4D,$65,$76,$50,$20,$4D,$4E,$20,$20,$20,$20,$20,$20
        .byte   $20,$20,$20,$20,$20,$76,$4D,$20,$76,$20,$65,$76,$7A,$20,$4E,$4D,$20,$20,$20,$20,$20,$20
        .byte   $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
        .byte   $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
        .byte   $20,$20,$28,$03,$29,$20,$03,$0F,$0D,$0D,$0F,$04,$0F,$12,$05,$20,$31,$39,$38,$32,$20,$20
        .byte   $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
        .byte   $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
        .byte   $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
        .byte   $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
        .byte   $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20

RomTrash:  ; @@@
        .byte   $FF,$AF,$FF,$BD,$13
        .byte   $17,$00,$AA,$AA,$AA,$AA,$AA,$AA
        .byte   $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA
        .byte   $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA
        .byte   $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA
        .byte   $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA
        .byte   $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA
        .byte   $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA
        .byte   $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA
        .byte   $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA
        .byte   $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA
        .byte   $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA
        .byte   $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA
        .byte   $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA
        .byte   $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA
        .byte   $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA
        .byte   $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA
        .byte   $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA
        .byte   $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA
        .byte   $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA
        .byte   $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA
        .byte   $AA,$AA,$AA,$AA,$AA,$00,$00,$04
        .byte   $20,$00,$A0,$00,$80,$00,$00,$20
        .byte   $00,$00,$80,$00,$80,$00,$00,$00
        .byte   $00,$80,$00,$00,$00,$00,$00,$00
        .byte   $00,$20,$80,$00,$20,$80,$00,$20
        .byte   $80,$00,$00,$81,$20,$20,$01,$24
        .byte   $00,$20,$00,$00,$80,$00,$00,$04
        .byte   $80,$00,$00,$00,$00,$A0,$20,$A0
        .byte   $81,$20,$00,$20,$80,$20,$00,$00
        .byte   $00,$00,$00,$00,$00,$01,$00,$20
        .byte   $20,$80,$00,$80,$00,$00,$00,$20
        .byte   $80,$00,$00,$00,$00,$00,$80,$00
        .byte   $00,$20,$20,$20,$20,$00,$20,$80
        .byte   $00,$04,$81,$00,$00,$80,$00,$02
        .byte   $00,$20,$80,$A0,$00,$80,$80,$00
        .byte   $A0,$80,$80,$10,$02,$00,$00,$A0
        .byte   $80,$00,$20,$00,$00,$00,$00,$20
        .byte   $01,$00,$20,$00,$00,$20,$80,$00
        .byte   $20,$00,$00,$00,$00,$00,$00,$20
        .byte   $A0,$20,$00,$03,$07,$00,$20,$00
        .byte   $80,$00,$00,$00,$00,$20,$00,$00
        .byte   $01,$24,$A4,$01,$21,$A0,$A0,$20
        .byte   $20,$00,$80,$00,$60,$80,$20,$00
        .byte   $00,$00,$00,$20,$00,$02,$A0,$80
        .byte   $00,$00,$00,$20,$20,$00,$00,$00
        .byte   $20,$80,$04,$00,$00,$60,$80,$00
        .byte   $80,$80,$80,$00,$00,$02,$20,$00
        .byte   $20,$00,$00,$00,$04,$80,$00,$00
        .byte   $00,$00,$80,$80,$04,$20,$04,$20
        .byte   $04,$04,$01,$20,$00,$80,$02,$00
        .byte   $20,$20,$00,$00,$00,$80,$04,$A0
        .byte   $01,$00,$00,$00,$00,$00,$00,$04
        .byte   $20,$00,$82,$00,$00,$80,$00,$00
        .byte   $00,$00,$00,$00,$00,$00,$80,$00
        .byte   $00,$80,$20,$A0,$00,$00,$00,$00
        .byte   $04,$00,$80,$80,$00,$81,$00,$02
        .byte   $20,$00,$01,$20,$00,$20,$A0,$00
        .byte   $00,$00,$21,$20,$00,$00,$A0,$00
        .byte   $80,$80,$00,$20,$00,$00,$00,$A0
        .byte   $00,$04,$22,$00,$00,$00,$00,$00
        .byte   $00,$20,$20,$00,$00,$00,$20,$80
        .byte   $01,$04,$00,$80,$00,$A0,$00,$00
        .byte   $4C,$00,$00,$80,$24,$20,$00,$00
        .byte   $00,$00,$00,$00,$20,$80,$10,$00
        .byte   $20,$00,$20,$00,$20,$20,$84,$00
        .byte   $80,$00,$00,$80,$00,$A0,$80,$00
        .byte   $20,$A0,$20,$00,$80,$00,$04,$00
        .byte   $80,$00,$00,$00,$00,$00,$00,$00
        .byte   $80,$00,$00,$00,$04,$80,$20,$00
        .byte   $00,$20,$00,$00,$00,$00,$20,$81
        .byte   $00,$80,$00,$00,$00,$85,$24,$80
        .byte   $20,$04,$00,$00,$00,$20,$80,$80
        .byte   $80,$00,$01,$00,$00,$00,$80,$80
        .byte   $81,$00,$A0,$01,$00,$80,$00,$80
        .byte   $00,$00,$80,$00,$20,$A0,$00,$00
        .byte   $80,$80,$00,$00,$00,$28,$00,$00
        .byte   $81,$00,$20,$00,$20,$00,$00,$00
        .byte   $00,$00,$20,$80,$04,$00,$00,$80
        .byte   $20,$00,$00,$00,$20,$80,$00,$A0
        .byte   $00,$80,$01,$00,$60,$A0,$20,$00
        .byte   $00,$00,$20,$00,$00,$00,$21,$00
        .byte   $00,$00,$20,$04,$A0,$20,$00,$20
        .byte   $81,$00,$00,$04,$01,$20,$80,$01
        .byte   $02,$84,$00,$04,$00,$80,$A0,$A0
        .byte   $01,$80,$00,$A0,$00,$82,$03,$40
        .byte   $40,$C0,$02,$00,$8A,$16,$A8,$8C
        .byte   $9C,$24,$84,$00,$82,$88,$14,$20
        .byte   $A2,$A2,$08,$20,$A0,$00,$01,$A0
        .byte   $A0,$80,$28,$70,$11,$E2,$40,$C8
        .byte   $57,$B8,$2A,$71,$A8,$80,$08,$2C
        .byte   $05,$34,$80,$28,$AA,$A0,$4A,$E2
        .byte   $88,$00,$20,$00,$81,$8E,$54,$09
        .byte   $04,$00,$00,$A3,$02,$80,$48,$D2
        .byte   $A0,$A0,$90,$92,$20,$A0,$2C,$38
        .byte   $A5,$80,$03,$0C,$08,$B1,$58,$E8
        .byte   $40,$02,$62,$F2,$80,$40,$44,$26
        .byte   $48,$40,$34,$42,$00,$A1,$00,$50
        .byte   $00,$0A,$22,$A0,$80,$B8,$08,$A1
        .byte   $6B,$72,$08,$40,$01,$60,$80,$20
        .byte   $01,$20,$28,$D0,$68,$82,$16,$A5
        .byte   $01,$00,$01,$04,$20,$05,$10,$98
        .byte   $1C,$80,$48,$71,$96,$CB,$24,$8E
        .byte   $20,$09,$20,$41,$84,$81,$B0,$00
        .byte   $28,$C6,$20,$2C,$B2,$B0,$E8,$01
        .byte   $0C,$40,$08,$00,$A1,$20,$C0,$88
        .byte   $32,$80,$10,$1A,$90,$9C,$46,$0C
        .byte   $88,$10,$22,$86,$82,$90,$98,$60
        .byte   $42,$80,$90,$08,$E0,$12,$20,$00
        .byte   $21,$02,$00,$85,$81,$24,$71,$22
        .byte   $00,$24,$48,$30,$B0,$01,$A4,$08
        .byte   $81,$00,$21,$60,$AE,$10,$20,$04
        .byte   $A4,$20,$2A,$08,$20,$46,$C1,$8A
        .byte   $4A,$05,$20,$00,$60,$01,$74,$01
        .byte   $88,$8A,$12,$52,$30,$64,$08,$00
        .byte   $08,$02,$20,$00,$20,$38,$10,$5E
        .byte   $00,$A2,$38,$08,$30,$70,$42,$2A
        .byte   $00,$20,$AC,$22,$80,$D0,$80,$62
        .byte   $28,$82,$24,$A0,$20,$02,$2A,$80
        .byte   $C0,$82,$88,$80,$2A,$25,$90,$AA
        .byte   $00,$80,$E1,$C2,$04,$80,$05,$02
        .byte   $8B,$30,$09,$2E,$84,$F1,$60,$44
        .byte   $99,$4A,$9A,$30,$80,$04,$0C,$10
        .byte   $21,$03,$91,$06,$00,$2C,$63,$30
        .byte   $34,$2C,$00,$AC,$80,$00,$04,$02
        .byte   $0C,$A1,$E0,$80,$00,$15,$42,$26
        .byte   $20,$E0,$00,$10,$E0,$A4,$02,$2C
        .byte   $C0,$C2,$61,$A0,$0C,$29,$74,$00
        .byte   $A0,$C0,$A4,$81,$30,$B4,$10,$80
        .byte   $28,$3D,$10,$E0,$01,$DB,$02,$20
        .byte   $20,$48,$02,$E0,$20,$00,$8E,$A0
        .byte   $22,$8C,$08,$20,$11,$92,$90,$10
        .byte   $00,$02,$E0,$A0,$E1,$34,$4A,$99
        .byte   $00,$08,$82,$82,$09,$60,$3A,$80
        .byte   $98,$6A,$C0,$A2,$EC,$80,$20,$18
        .byte   $00,$8B,$08,$8D,$21,$90,$10,$B0
        .byte   $81,$00,$48,$90,$2E,$2E,$00,$83
        .byte   $00,$88,$14,$05,$00,$A2,$35,$22
        .byte   $80,$00,$01,$A4,$61,$82,$0D,$80
        .byte   $18,$08,$08,$20,$01,$0C,$82,$C0
        .byte   $0A,$92,$00,$30,$52,$84,$03,$88
        .byte   $2C,$81,$B3,$31,$00,$1C,$00,$00
        .byte   $A2,$00,$88,$32,$30,$04,$28,$38
        .byte   $A1,$A8,$80,$80,$6C,$00,$20,$C0
        .byte   $53,$90,$60,$62,$28,$83,$B9,$80
        .byte   $10,$A3,$08,$0C,$02,$80,$00,$B0
        .byte   $81,$20,$B0,$00,$80,$F2,$8C,$08
        .byte   $A9,$0A,$0C,$A4,$A4,$81,$A0,$34
        .byte   $00,$91,$40,$A0,$80,$80,$20,$91
        .byte   $89,$02,$41,$08,$82,$10,$22,$81
        .byte   $42,$00,$4A,$40,$50,$14,$50,$01
        .byte   $00,$80,$18,$12,$90,$08,$80,$00
        .byte   $10,$01,$72,$40,$00,$10,$12,$1C
        .byte   $40,$90,$10,$48,$D4,$10,$74,$08
        .byte   $1A,$08,$28,$02,$00,$18,$40,$14
        .byte   $60,$04,$00,$40,$F0,$60,$02,$18
        .byte   $10,$1C,$40,$10,$50,$05,$04,$40
        .byte   $42,$10,$14,$0E,$06,$B0,$48,$55
        .byte   $80,$10,$C0,$49,$50,$54,$4A,$04
        .byte   $00,$44,$02,$45,$30,$40,$14,$80
        .byte   $10,$B0,$02,$00,$00,$90,$19,$25
        .byte   $40,$02,$06,$80,$E2,$63,$80,$62
        .byte   $43,$08,$C4,$40,$C0,$06,$11,$41
        .byte   $01,$85,$44,$04,$50,$41,$BE,$00
        .byte   $D1,$00,$41,$40,$62,$08,$84,$D4
        .byte   $01,$01,$82,$01,$40,$50,$C0,$48
        .byte   $54,$00,$30,$00,$00,$48,$26,$00
        .byte   $41,$60,$00,$00,$04,$0C,$10,$01
        .byte   $60,$47,$86,$68,$80,$3D,$00,$11
        .byte   $16,$00,$20,$80,$30,$04,$14,$40
        .byte   $06,$D4,$40,$01,$40,$43,$07,$00
        .byte   $D0,$08,$44,$05,$10,$12,$5A,$91
        .byte   $70,$05,$18,$90,$C0,$00,$53,$10
        .byte   $48,$10,$13,$04,$03,$32,$10,$02
        .byte   $4C,$D4,$4C,$10,$20,$80,$25,$40
        .byte   $04,$34,$10,$41,$40,$50,$10,$15
        .byte   $40,$F0,$70,$20,$20,$04,$10,$00
        .byte   $42,$90,$0A,$40,$44,$F4,$C0,$10
        .byte   $80,$20,$10,$C2,$C0,$51,$11,$00
        .byte   $16,$78,$24,$15,$C4,$60,$A0,$94
        .byte   $44,$90,$80,$52,$40,$98,$10,$80
        .byte   $70,$4C,$1B,$41,$10,$40,$00,$C0
        .byte   $8E,$20,$00,$10,$30,$40,$41,$01
        .byte   $00,$29,$10,$2E,$41,$08,$40,$E8
        .byte   $44,$00,$40,$82,$E1,$80,$0C,$20
        .byte   $06,$50,$0D,$60,$F0,$30,$E0,$71
        .byte   $11,$05,$B0,$C0,$C4,$49,$48,$10
        .byte   $08,$04,$08,$40,$10,$D0,$48,$24
        .byte   $84,$08,$40,$14,$70,$4A,$04,$04
        .byte   $51,$48,$14,$10,$84,$D1,$9C,$0C
        .byte   $48,$F0,$04,$40,$31,$58,$0B,$02
        .byte   $00,$C0,$00,$43,$14,$01,$6D,$00
        .byte   $00,$21,$31,$A0,$52,$65,$41,$04
        .byte   $00,$80,$08,$D4,$50,$60,$06,$00
        .byte   $00,$A1,$08,$02,$D0,$50,$69,$10
        .byte   $00,$44,$28,$04,$80,$24,$52,$20
        .byte   $4C,$84,$1D,$30,$C0,$25,$00,$00
        .byte   $58,$5E,$00,$28,$01,$04,$90,$10
        .byte   $44,$96,$16,$16,$D0,$10,$00,$14
        .byte   $01,$00,$34,$40,$42,$51,$10,$40
        .byte   $50,$E1,$40,$40,$CC,$05,$00,$88
        .byte   $24,$38,$00,$44,$20,$70,$44,$00
        .byte   $00,$58,$10,$A2,$81,$04,$84,$06
        .byte   $41,$50,$86,$00,$02,$D8,$00,$D0
        .byte   $98,$86,$05,$05,$76,$04,$0C,$C2
        .byte   $44,$28,$04,$09,$44,$44,$10,$D5
        .byte   $08,$2B,$09,$0C,$10,$00,$44,$09
        .byte   $11,$06,$03,$02,$00,$20,$00,$40
        .byte   $01,$41,$20,$08,$80,$C0,$08,$20
        .byte   $1C,$00,$B0,$50,$02,$00,$60,$50
        .byte   $80,$80,$52,$30,$B0,$00,$04,$36
        .byte   $40,$08,$0D,$09,$10,$80,$40,$C0
        .byte   $C4,$80,$00,$80,$C0,$48,$00,$10
        .byte   $43,$50,$03,$40,$FB

Raid_On_Fort_Knox_Rom_End:           ; @@@

end

